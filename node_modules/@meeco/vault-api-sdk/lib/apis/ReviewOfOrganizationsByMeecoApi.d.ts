/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { GetOrganizationServicebyIdResponse, ListOrganizationsResponse, ListOrganizationsResponse2, OrganizationResponse } from '../models';
export interface ManagementRequestedOrganizationServicesGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface ManagementRequestedOrganizationServicesIdRejectDeleteRequest {
    id: string;
}
export interface ManagementRequestedOrganizationServicesIdValidatePutRequest {
    id: string;
}
export interface ManagementRequestedOrganizationsGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface ManagementRequestedOrganizationsIdRejectDeleteRequest {
    id: string;
}
export interface ManagementRequestedOrganizationsIdValidatePutRequest {
    id: string;
}
/**
 *
 */
export declare class ReviewOfOrganizationsByMeecoApi extends runtime.BaseAPI {
    /**
     * List all pending organization service requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organization service requests
     */
    managementRequestedOrganizationServicesGetRaw(requestParameters: ManagementRequestedOrganizationServicesGetRequest): Promise<runtime.ApiResponse<ListOrganizationsResponse>>;
    /**
     * List all pending organization service requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organization service requests
     */
    managementRequestedOrganizationServicesGet(nextPageAfter?: string, perPage?: number): Promise<ListOrganizationsResponse>;
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject a requested organization service
     */
    managementRequestedOrganizationServicesIdRejectDeleteRaw(requestParameters: ManagementRequestedOrganizationServicesIdRejectDeleteRequest): Promise<runtime.ApiResponse<GetOrganizationServicebyIdResponse>>;
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject a requested organization service
     */
    managementRequestedOrganizationServicesIdRejectDelete(id: string): Promise<GetOrganizationServicebyIdResponse>;
    /**
     * Validate an organization service  with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  An organization service can only be used  by users if it is validated.
     * Validate a requested organization service
     */
    managementRequestedOrganizationServicesIdValidatePutRaw(requestParameters: ManagementRequestedOrganizationServicesIdValidatePutRequest): Promise<runtime.ApiResponse<GetOrganizationServicebyIdResponse>>;
    /**
     * Validate an organization service  with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  An organization service can only be used  by users if it is validated.
     * Validate a requested organization service
     */
    managementRequestedOrganizationServicesIdValidatePut(id: string): Promise<GetOrganizationServicebyIdResponse>;
    /**
     * List all pending organization requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organizations requests
     */
    managementRequestedOrganizationsGetRaw(requestParameters: ManagementRequestedOrganizationsGetRequest): Promise<runtime.ApiResponse<ListOrganizationsResponse2>>;
    /**
     * List all pending organization requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organizations requests
     */
    managementRequestedOrganizationsGet(nextPageAfter?: string, perPage?: number): Promise<ListOrganizationsResponse2>;
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject an requested organization
     */
    managementRequestedOrganizationsIdRejectDeleteRaw(requestParameters: ManagementRequestedOrganizationsIdRejectDeleteRequest): Promise<runtime.ApiResponse<OrganizationResponse>>;
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject an requested organization
     */
    managementRequestedOrganizationsIdRejectDelete(id: string): Promise<OrganizationResponse>;
    /**
     * Validate an organization with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  Once an organization is validated, the following happens:  * The user who requested the organization becomes a member with role `owner` * It is now possible to invite other users as organization member * It is possible to create organization services * It is possible to link a user account as an organization agent * The organization is now visible to other users
     * Validate a requested organization
     */
    managementRequestedOrganizationsIdValidatePutRaw(requestParameters: ManagementRequestedOrganizationsIdValidatePutRequest): Promise<runtime.ApiResponse<OrganizationResponse>>;
    /**
     * Validate an organization with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  Once an organization is validated, the following happens:  * The user who requested the organization becomes a member with role `owner` * It is now possible to invite other users as organization member * It is possible to create organization services * It is possible to link a user account as an organization agent * The organization is now visible to other users
     * Validate a requested organization
     */
    managementRequestedOrganizationsIdValidatePut(id: string): Promise<OrganizationResponse>;
}
