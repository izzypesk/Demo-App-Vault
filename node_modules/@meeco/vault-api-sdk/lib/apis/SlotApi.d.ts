/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { PutSlotsRequest, SlotResponse } from '../models';
export interface SlotsIdDeleteRequest {
    id: string;
}
export interface SlotsIdGetRequest {
    id: string;
}
export interface SlotsIdPutRequest {
    id: string;
    updateSlotParams: PutSlotsRequest;
}
/**
 *
 */
export declare class SlotApi extends runtime.BaseAPI {
    /**
     * Select a Slot by `id` and delete it from the database.
     * Delete a Slot
     */
    slotsIdDeleteRaw(requestParameters: SlotsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Select a Slot by `id` and delete it from the database.
     * Delete a Slot
     */
    slotsIdDelete(id: string): Promise<void>;
    /**
     * Retrieve a Slot\'s fields by the record\'s `id`.
     * Get a Slot
     */
    slotsIdGetRaw(requestParameters: SlotsIdGetRequest): Promise<runtime.ApiResponse<SlotResponse>>;
    /**
     * Retrieve a Slot\'s fields by the record\'s `id`.
     * Get a Slot
     */
    slotsIdGet(id: string): Promise<SlotResponse>;
    /**
     * Select a Slot by `id` and update its fields.
     * Update a Slot
     */
    slotsIdPutRaw(requestParameters: SlotsIdPutRequest): Promise<runtime.ApiResponse<SlotResponse>>;
    /**
     * Select a Slot by `id` and update its fields.
     * Update a Slot
     */
    slotsIdPut(id: string, updateSlotParams: PutSlotsRequest): Promise<SlotResponse>;
}
