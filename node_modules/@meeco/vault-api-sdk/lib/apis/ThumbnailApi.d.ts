/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ThumbnailResponse } from '../models';
export interface ThumbnailsIdDeleteRequest {
    id: string;
}
export interface ThumbnailsIdGetRequest {
    id: string;
}
export interface ThumbnailsPostRequest {
    binaryFile: Blob;
    binaryId: string;
    sizeType: string;
}
/**
 *
 */
export declare class ThumbnailApi extends runtime.BaseAPI {
    /**
     * Delete a Thumbnail specified by `id`.
     * Delete thumbnail
     */
    thumbnailsIdDeleteRaw(requestParameters: ThumbnailsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a Thumbnail specified by `id`.
     * Delete thumbnail
     */
    thumbnailsIdDelete(id: string): Promise<void>;
    /**
     * Retrieve a thumbnail specified by `id`.
     * View thumbnail
     */
    thumbnailsIdGetRaw(requestParameters: ThumbnailsIdGetRequest): Promise<runtime.ApiResponse<Blob>>;
    /**
     * Retrieve a thumbnail specified by `id`.
     * View thumbnail
     */
    thumbnailsIdGet(id: string): Promise<Blob>;
    /**
     * This is used to upload a thumbnail version of an already uploaded image file. The new image will be contained in `binary[file]`, and `binary_id`specifies the associated Binary.
     * Upload thumbnail
     */
    thumbnailsPostRaw(requestParameters: ThumbnailsPostRequest): Promise<runtime.ApiResponse<ThumbnailResponse>>;
    /**
     * This is used to upload a thumbnail version of an already uploaded image file. The new image will be contained in `binary[file]`, and `binary_id`specifies the associated Binary.
     * Upload thumbnail
     */
    thumbnailsPost(binaryFile: Blob, binaryId: string, sizeType: string): Promise<ThumbnailResponse>;
}
