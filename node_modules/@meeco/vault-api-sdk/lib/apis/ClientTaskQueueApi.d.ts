/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ClientTaskQueueResponse, ClientTaskQueueResponse1, PutTasksRequest } from '../models';
export interface ClientTaskQueueGetRequest {
    nextPageAfter?: string;
    perPage?: number;
    supressChangingState?: boolean;
    state?: string;
}
export interface ClientTaskQueuePutRequest {
    updateClientParams?: PutTasksRequest;
}
/**
 *
 */
export declare class ClientTaskQueueApi extends runtime.BaseAPI {
    /**
     * A ClientTask represents a task the client is supposed to perform.  Field `work_type` represents a type of work, `target_id` points to the input argument of the task and its semantics depends on `work_type`.  Currently there is only one work type: `update_share`. In an `update_share` task `target_id` points to a share. `update_share` tasks are created when for all shares of an item when the item is changed. Clients are expected to re-encrypt encrypted values of the the shared items for a share.  Each ClientTask may have the following states: * `todo` * `in_progress` * `done` * `failed`  This endpoint serves client tasks ordered by `created_at` in the descending order with state `todo`. It is possible to request tasks with a different state using parameter `state`.  By default all returned tasks with state `todo` transition to state `in_progress`. This goes against the RESTful architecture, but it is implemented in such this way for practical reasons to save on one `PUT` call. This behavior can be changed by parameter `supress_changing_state=true`  All tasks with state `in_progress` are transitioned back to `todo` after a timeout of 10 minutes unless the state is changed to `done` or `failed`.
     * Read the client task queue
     */
    clientTaskQueueGetRaw(requestParameters: ClientTaskQueueGetRequest): Promise<runtime.ApiResponse<ClientTaskQueueResponse>>;
    /**
     * A ClientTask represents a task the client is supposed to perform.  Field `work_type` represents a type of work, `target_id` points to the input argument of the task and its semantics depends on `work_type`.  Currently there is only one work type: `update_share`. In an `update_share` task `target_id` points to a share. `update_share` tasks are created when for all shares of an item when the item is changed. Clients are expected to re-encrypt encrypted values of the the shared items for a share.  Each ClientTask may have the following states: * `todo` * `in_progress` * `done` * `failed`  This endpoint serves client tasks ordered by `created_at` in the descending order with state `todo`. It is possible to request tasks with a different state using parameter `state`.  By default all returned tasks with state `todo` transition to state `in_progress`. This goes against the RESTful architecture, but it is implemented in such this way for practical reasons to save on one `PUT` call. This behavior can be changed by parameter `supress_changing_state=true`  All tasks with state `in_progress` are transitioned back to `todo` after a timeout of 10 minutes unless the state is changed to `done` or `failed`.
     * Read the client task queue
     */
    clientTaskQueueGet(nextPageAfter?: string, perPage?: number, supressChangingState?: boolean, state?: string): Promise<ClientTaskQueueResponse>;
    /**
     * Change the state of client tasks. Normally used to set tasks to `done` or `failed`. Along with the states the client can pass task execution reports. A report is a JSON object. A report can be useful for failed tasks.Responds with a non-paginated list of with the same tasks.
     * Change the state of client tasks
     */
    clientTaskQueuePutRaw(requestParameters: ClientTaskQueuePutRequest): Promise<runtime.ApiResponse<ClientTaskQueueResponse1>>;
    /**
     * Change the state of client tasks. Normally used to set tasks to `done` or `failed`. Along with the states the client can pass task execution reports. A report is a JSON object. A report can be useful for failed tasks.Responds with a non-paginated list of with the same tasks.
     * Change the state of client tasks
     */
    clientTaskQueuePut(updateClientParams?: PutTasksRequest): Promise<ClientTaskQueueResponse1>;
}
