/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { DeletionQueueItemResponse, MeResponse, PostMeRequest, PostMeResponse, PostMeWithPasswordRequest, PutMeRequest } from '../models';
export interface MePasswordPutRequest {
    userEmail: string;
    requestOrigin?: string;
}
export interface MePostRequest {
    createUserParams?: PostMeRequest;
}
export interface MePutRequest {
    updateUserParams?: PutMeRequest;
}
export interface MeWithPasswordPostRequest {
    createUserWithPwdParams?: PostMeWithPasswordRequest;
}
/**
 *
 */
export declare class UserApi extends runtime.BaseAPI {
    /**
     * Delete the account associated with the currently authenticated user.
     * Delete an account
     */
    meDeleteRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete the account associated with the currently authenticated user.
     * Delete an account
     */
    meDelete(): Promise<void>;
    /**
     * Removes the account associated with the currently authenticated user from the queue for asynchronous deletion.
     * Remove current user from queue for deletion
     */
    meDeletionQueueDeleteRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Removes the account associated with the currently authenticated user from the queue for asynchronous deletion.
     * Remove current user from queue for deletion
     */
    meDeletionQueueDelete(): Promise<void>;
    /**
     * Queues the account associated with the currently authenticated user for asynchronous deletion.
     * Queue current user for deletion
     */
    meDeletionQueuePostRaw(): Promise<runtime.ApiResponse<DeletionQueueItemResponse>>;
    /**
     * Queues the account associated with the currently authenticated user for asynchronous deletion.
     * Queue current user for deletion
     */
    meDeletionQueuePost(): Promise<DeletionQueueItemResponse>;
    /**
     * Returns account details for the currently authenticated user.
     * Show current user
     */
    meGetRaw(): Promise<runtime.ApiResponse<MeResponse>>;
    /**
     * Returns account details for the currently authenticated user.
     * Show current user
     */
    meGet(): Promise<MeResponse>;
    /**
     * Request a password reset token to be sent to the specified email address.
     * Request a password reset
     */
    mePasswordPutRaw(requestParameters: MePasswordPutRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Request a password reset token to be sent to the specified email address.
     * Request a password reset
     */
    mePasswordPut(userEmail: string, requestOrigin?: string): Promise<void>;
    /**
     * Takes a public key and an admission token and creates a user account.
     * Create a user
     */
    mePostRaw(requestParameters: MePostRequest): Promise<runtime.ApiResponse<PostMeResponse>>;
    /**
     * Takes a public key and an admission token and creates a user account.
     * Create a user
     */
    mePost(createUserParams?: PostMeRequest): Promise<PostMeResponse>;
    /**
     * Updates details for the currently authenticated user.
     * Update current user
     */
    mePutRaw(requestParameters: MePutRequest): Promise<runtime.ApiResponse<MeResponse>>;
    /**
     * Updates details for the currently authenticated user.
     * Update current user
     */
    mePut(updateUserParams?: PutMeRequest): Promise<MeResponse>;
    /**
     * Takes an email and a password, and creates a user.
     * Create a user
     */
    meWithPasswordPostRaw(requestParameters: MeWithPasswordPostRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Takes an email and a password, and creates a user.
     * Create a user
     */
    meWithPasswordPost(createUserWithPwdParams?: PostMeWithPasswordRequest): Promise<void>;
}
