/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { EventResponse, EventsResponse, PostEventsRequest } from '../models';
export interface EventsGetRequest {
    nextPageAfter?: string;
    perPage?: number;
    eventType?: string;
    onDate?: string;
}
export interface EventsIdGetRequest {
    id: string;
}
export interface EventsPostRequest {
    eventParams: PostEventsRequest;
}
/**
 *
 */
export declare class EventsApi extends runtime.BaseAPI {
    /**
     * Retrieves events for the current user. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * Get Events
     */
    eventsGetRaw(requestParameters: EventsGetRequest): Promise<runtime.ApiResponse<EventsResponse>>;
    /**
     * Retrieves events for the current user. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * Get Events
     */
    eventsGet(nextPageAfter?: string, perPage?: number, eventType?: string, onDate?: string): Promise<EventsResponse>;
    /**
     * TODO
     * Get Event
     */
    eventsIdGetRaw(requestParameters: EventsIdGetRequest): Promise<runtime.ApiResponse<EventResponse>>;
    /**
     * TODO
     * Get Event
     */
    eventsIdGet(id: string): Promise<EventResponse>;
    /**
     * TODO
     * Create Event
     */
    eventsPostRaw(requestParameters: EventsPostRequest): Promise<runtime.ApiResponse<EventResponse>>;
    /**
     * TODO
     * Create Event
     */
    eventsPost(eventParams: PostEventsRequest): Promise<EventResponse>;
}
