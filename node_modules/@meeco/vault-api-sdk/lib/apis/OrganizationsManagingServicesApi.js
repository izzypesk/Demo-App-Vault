"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var OrganizationsManagingServicesApi = /** @class */ (function (_super) {
    __extends(OrganizationsManagingServicesApi, _super);
    function OrganizationsManagingServicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List requested services for a given organization.  Members of the organization with roles `owner` and `admin` can use this endpoint to list the requested services for this organization.
     * List requested services for a given organization
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdRequestedServicesGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdRequestedServicesGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/organizations/{organization_id}/requested_services".replace("{" + "organization_id" + "}", encodeURIComponent(String(requestParameters.organizationId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ListOrganizationsResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * List requested services for a given organization.  Members of the organization with roles `owner` and `admin` can use this endpoint to list the requested services for this organization.
     * List requested services for a given organization
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdRequestedServicesGet = function (organizationId, nextPageAfter, perPage) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.organizationsOrganizationIdRequestedServicesGetRaw({ organizationId: organizationId, nextPageAfter: nextPageAfter, perPage: perPage })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a requested organization service. Organization members with roles `admin` and `owner` can use this endpoint to delete a requested organization.
     * Delete a requested organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling organizationsOrganizationIdServicesIdDelete.');
                        }
                        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdServicesIdDelete.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/organizations/{organization_id}/services/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))).replace("{" + "organization_id" + "}", encodeURIComponent(String(requestParameters.organizationId))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a requested organization service. Organization members with roles `admin` and `owner` can use this endpoint to delete a requested organization.
     * Delete a requested organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdDelete = function (id, organizationId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.organizationsOrganizationIdServicesIdDeleteRaw({ id: id, organizationId: organizationId })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Login as a service agent.  An service agent is a non-human Vault user account acting on behalf of the service.  An organization owner or admin can use this endpoint to obtain a session token for the service agent.
     * Log in as organization service agent
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdLoginPostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdServicesIdLoginPost.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling organizationsOrganizationIdServicesIdLoginPost.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/organizations/{organization_id}/services/{id}/login".replace("{" + "organization_id" + "}", encodeURIComponent(String(requestParameters.organizationId))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.OrganizationAgentLoginDetailResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Login as a service agent.  An service agent is a non-human Vault user account acting on behalf of the service.  An organization owner or admin can use this endpoint to obtain a session token for the service agent.
     * Log in as organization service agent
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdLoginPost = function (organizationId, id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.organizationsOrganizationIdServicesIdLoginPostRaw({ organizationId: organizationId, id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify a requested organization service. Members of the organization with roles `owner` and `admin` can use this endpoint to modify the requested service.
     * Update a requested organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdPutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling organizationsOrganizationIdServicesIdPut.');
                        }
                        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdServicesIdPut.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/organizations/{organization_id}/services/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))).replace("{" + "organization_id" + "}", encodeURIComponent(String(requestParameters.organizationId))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.UpdateOrganizationServiceRequestToJSON(requestParameters.updateOrganizationServiceParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.CreateOrganizationServiceResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify a requested organization service. Members of the organization with roles `owner` and `admin` can use this endpoint to modify the requested service.
     * Update a requested organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesIdPut = function (id, organizationId, updateOrganizationServiceParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.organizationsOrganizationIdServicesIdPutRaw({ id: id, organizationId: organizationId, updateOrganizationServiceParams: updateOrganizationServiceParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create an organization service. Organization members with roles `admin` and `owner` can create an organization service. The new organization service has status `requested`. Organization services with status `requested` cannot be used and are invisible for users other than the member of the organization which requested the service. Services with status `requested` need to be validated or rejected by Meeco.
     * Create an organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesPostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                            throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdServicesPost.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/organizations/{organization_id}/services".replace("{" + "organization_id" + "}", encodeURIComponent(String(requestParameters.organizationId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PostOrganizationServiceRequestToJSON(requestParameters.organizationServiceParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.CreateOrganizationServiceResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create an organization service. Organization members with roles `admin` and `owner` can create an organization service. The new organization service has status `requested`. Organization services with status `requested` cannot be used and are invisible for users other than the member of the organization which requested the service. Services with status `requested` need to be validated or rejected by Meeco.
     * Create an organization service
     */
    OrganizationsManagingServicesApi.prototype.organizationsOrganizationIdServicesPost = function (organizationId, organizationServiceParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.organizationsOrganizationIdServicesPostRaw({ organizationId: organizationId, organizationServiceParams: organizationServiceParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return OrganizationsManagingServicesApi;
}(runtime.BaseAPI));
exports.OrganizationsManagingServicesApi = OrganizationsManagingServicesApi;
