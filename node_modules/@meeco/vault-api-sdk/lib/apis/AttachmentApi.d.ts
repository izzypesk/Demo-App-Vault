/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AttachmentResponse, AttachmentsResponse } from '../models';
export interface AttachmentsGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface AttachmentsIdDeleteRequest {
    id: string;
}
export interface AttachmentsIdDownloadGetRequest {
    id: string;
}
export interface AttachmentsIdGetRequest {
    id: string;
}
export interface AttachmentsPostRequest {
    attachmentFile: Blob;
    attachmentFilename: string;
    attachmentContentType: string;
}
/**
 *
 */
export declare class AttachmentApi extends runtime.BaseAPI {
    /**
     * List attachments belonging to the current user.
     * List attachments
     */
    attachmentsGetRaw(requestParameters: AttachmentsGetRequest): Promise<runtime.ApiResponse<AttachmentsResponse>>;
    /**
     * List attachments belonging to the current user.
     * List attachments
     */
    attachmentsGet(nextPageAfter?: string, perPage?: number): Promise<AttachmentsResponse>;
    /**
     * Select an attachment by `id` and delete it.
     * Delete attachment
     */
    attachmentsIdDeleteRaw(requestParameters: AttachmentsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Select an attachment by `id` and delete it.
     * Delete attachment
     */
    attachmentsIdDelete(id: string): Promise<void>;
    /**
     * Select an attachment by `id` and download it.
     * Download attachment
     */
    attachmentsIdDownloadGetRaw(requestParameters: AttachmentsIdDownloadGetRequest): Promise<runtime.ApiResponse<Blob>>;
    /**
     * Select an attachment by `id` and download it.
     * Download attachment
     */
    attachmentsIdDownloadGet(id: string): Promise<Blob>;
    /**
     * Select an attachment by `id` and view its metadata (without retrieving the binary data).
     * View attachment
     */
    attachmentsIdGetRaw(requestParameters: AttachmentsIdGetRequest): Promise<runtime.ApiResponse<AttachmentResponse>>;
    /**
     * Select an attachment by `id` and view its metadata (without retrieving the binary data).
     * View attachment
     */
    attachmentsIdGet(id: string): Promise<AttachmentResponse>;
    /**
     * Creates an attachment record, which represents a binary file. The file record can be attached to an Attachable type (eg Slot) via a BinaryAttachment record.
     * Upload attachment
     */
    attachmentsPostRaw(requestParameters: AttachmentsPostRequest): Promise<runtime.ApiResponse<AttachmentResponse>>;
    /**
     * Creates an attachment record, which represents a binary file. The file record can be attached to an Attachable type (eg Slot) via a BinaryAttachment record.
     * Upload attachment
     */
    attachmentsPost(attachmentFile: Blob, attachmentFilename: string, attachmentContentType: string): Promise<AttachmentResponse>;
}
