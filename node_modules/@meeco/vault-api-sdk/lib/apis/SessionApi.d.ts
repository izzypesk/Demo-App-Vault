/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateSessionResponse, PostSessionLoginRequest, PostSessionRequest, SessionLoginResponse } from '../models';
export interface SessionAllDeleteRequest {
    exceptCurrent?: string;
}
export interface SessionLoginPostRequest {
    loginParams?: PostSessionLoginRequest;
}
export interface SessionPostRequest {
    loginWithPublicKeyParams?: PostSessionRequest;
}
/**
 *
 */
export declare class SessionApi extends runtime.BaseAPI {
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * Deletes all user sessions
     */
    sessionAllDeleteRaw(requestParameters: SessionAllDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * Deletes all user sessions
     */
    sessionAllDelete(exceptCurrent?: string): Promise<void>;
    /**
     * Delete the current session, logging the user out. The session is selected by the current authentication string, which is the only parameter needed.
     * Log out / Delete Session
     */
    sessionDeleteRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete the current session, logging the user out. The session is selected by the current authentication string, which is the only parameter needed.
     * Log out / Delete Session
     */
    sessionDelete(): Promise<void>;
    /**
     * Log in (Create Session)
     */
    sessionLoginPostRaw(requestParameters: SessionLoginPostRequest): Promise<runtime.ApiResponse<SessionLoginResponse>>;
    /**
     * Log in (Create Session)
     */
    sessionLoginPost(loginParams?: PostSessionLoginRequest): Promise<SessionLoginResponse>;
    /**
     * Log in with the public key and obtain an session authentication string encrypted with the user\'s public key
     * Log in with the public key
     */
    sessionPostRaw(requestParameters: SessionPostRequest): Promise<runtime.ApiResponse<CreateSessionResponse>>;
    /**
     * Log in with the public key and obtain an session authentication string encrypted with the user\'s public key
     * Log in with the public key
     */
    sessionPost(loginWithPublicKeyParams?: PostSessionRequest): Promise<CreateSessionResponse>;
    /**
     * Given an existing session, the client can hit this endpoint to indicate that the user has reopened the app, generating a login event. This is currently used only in the Digital Vault app.
     * Resume session
     */
    sessionResumePatchRaw(): Promise<runtime.ApiResponse<SessionLoginResponse>>;
    /**
     * Given an existing session, the client can hit this endpoint to indicate that the user has reopened the app, generating a login event. This is currently used only in the Digital Vault app.
     * Resume session
     */
    sessionResumePatch(): Promise<SessionLoginResponse>;
}
