"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var ThumbnailApi = /** @class */ (function (_super) {
    __extends(ThumbnailApi, _super);
    function ThumbnailApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a Thumbnail specified by `id`.
     * Delete thumbnail
     */
    ThumbnailApi.prototype.thumbnailsIdDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling thumbnailsIdDelete.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/thumbnails/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a Thumbnail specified by `id`.
     * Delete thumbnail
     */
    ThumbnailApi.prototype.thumbnailsIdDelete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.thumbnailsIdDeleteRaw({ id: id })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a thumbnail specified by `id`.
     * View thumbnail
     */
    ThumbnailApi.prototype.thumbnailsIdGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling thumbnailsIdGet.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/thumbnails/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * Retrieve a thumbnail specified by `id`.
     * View thumbnail
     */
    ThumbnailApi.prototype.thumbnailsIdGet = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.thumbnailsIdGetRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This is used to upload a thumbnail version of an already uploaded image file. The new image will be contained in `binary[file]`, and `binary_id`specifies the associated Binary.
     * Upload thumbnail
     */
    ThumbnailApi.prototype.thumbnailsPostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.binaryFile === null || requestParameters.binaryFile === undefined) {
                            throw new runtime.RequiredError('binaryFile', 'Required parameter requestParameters.binaryFile was null or undefined when calling thumbnailsPost.');
                        }
                        if (requestParameters.binaryId === null || requestParameters.binaryId === undefined) {
                            throw new runtime.RequiredError('binaryId', 'Required parameter requestParameters.binaryId was null or undefined when calling thumbnailsPost.');
                        }
                        if (requestParameters.sizeType === null || requestParameters.sizeType === undefined) {
                            throw new runtime.RequiredError('sizeType', 'Required parameter requestParameters.sizeType was null or undefined when calling thumbnailsPost.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.binaryFile !== undefined) {
                            formParams.append('binary[file]', requestParameters.binaryFile);
                        }
                        if (requestParameters.binaryId !== undefined) {
                            formParams.append('binary_id', requestParameters.binaryId);
                        }
                        if (requestParameters.sizeType !== undefined) {
                            formParams.append('size_type', requestParameters.sizeType);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/thumbnails",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ThumbnailResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * This is used to upload a thumbnail version of an already uploaded image file. The new image will be contained in `binary[file]`, and `binary_id`specifies the associated Binary.
     * Upload thumbnail
     */
    ThumbnailApi.prototype.thumbnailsPost = function (binaryFile, binaryId, sizeType) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.thumbnailsPostRaw({ binaryFile: binaryFile, binaryId: binaryId, sizeType: sizeType })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ThumbnailApi;
}(runtime.BaseAPI));
exports.ThumbnailApi = ThumbnailApi;
