"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var ItemApi = /** @class */ (function (_super) {
    __extends(ItemApi, _super);
    function ItemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Fetch items of the current user.
     * Get your own items
     */
    ItemApi.prototype.itemsGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.templateIds !== undefined) {
                            queryParameters['template_ids'] = requestParameters.templateIds;
                        }
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/items",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ItemsResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Fetch items of the current user.
     * Get your own items
     */
    ItemApi.prototype.itemsGet = function (templateIds, nextPageAfter, perPage) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsGetRaw({ templateIds: templateIds, nextPageAfter: nextPageAfter, perPage: perPage })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a specific Item by `id`.
     * Delete Item
     */
    ItemApi.prototype.itemsIdDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsIdDelete.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/items/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a specific Item by `id`.
     * Delete Item
     */
    ItemApi.prototype.itemsIdDelete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsIdDeleteRaw({ id: id })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a specific Item by `id`.
     * Get Item
     */
    ItemApi.prototype.itemsIdGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsIdGet.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/items/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ItemResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a specific Item by `id`.
     * Get Item
     */
    ItemApi.prototype.itemsIdGet = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsIdGetRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an Item specified by `id` with fields provided in the JSON body.
     * Update Item
     */
    ItemApi.prototype.itemsIdPutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling itemsIdPut.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/items/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PutFastItemsRequestToJSON(requestParameters.updateItemParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ItemResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update an Item specified by `id` with fields provided in the JSON body.
     * Update Item
     */
    ItemApi.prototype.itemsIdPut = function (id, updateItemParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsIdPutRaw({ id: id, updateItemParams: updateItemParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create an Item populated with slot data carried in payload. Slot records are created and associated with the item by the server.
     * Create Item
     */
    ItemApi.prototype.itemsPostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/items",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PostFastItemsRequestToJSON(requestParameters.createItemParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ItemResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create an Item populated with slot data carried in payload. Slot records are created and associated with the item by the server.
     * Create Item
     */
    ItemApi.prototype.itemsPost = function (createItemParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itemsPostRaw({ createItemParams: createItemParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get items shared with the current user. Items of expired shares are not shown. For slot shares its items are also served. For item shares all slots of the item are served. The values of slots are in Share objects in field `encrypted_values`. `encrypted_values` is a map where the keys are slot IDs and values are encrypted slot values.
     * List items shared with me
     */
    ItemApi.prototype.sharedItemsIncomingGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/shared/items/incoming",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.IncomingSharesResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get items shared with the current user. Items of expired shares are not shown. For slot shares its items are also served. For item shares all slots of the item are served. The values of slots are in Share objects in field `encrypted_values`. `encrypted_values` is a map where the keys are slot IDs and values are encrypted slot values.
     * List items shared with me
     */
    ItemApi.prototype.sharedItemsIncomingGet = function (nextPageAfter, perPage) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedItemsIncomingGetRaw({ nextPageAfter: nextPageAfter, perPage: perPage })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get items the current shared has shared with others. By default items of expired shares are not served. Adding parameter `with_expired` will result in serving all shares items and slots including expired shares.
     * List your items shared with others
     */
    ItemApi.prototype.sharedItemsOutgoingGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        if (requestParameters.withExpired !== undefined) {
                            queryParameters['with_expired'] = requestParameters.withExpired;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/shared/items/outgoing",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.IncomingSharesResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get items the current shared has shared with others. By default items of expired shares are not served. Adding parameter `with_expired` will result in serving all shares items and slots including expired shares.
     * List your items shared with others
     */
    ItemApi.prototype.sharedItemsOutgoingGet = function (nextPageAfter, perPage, withExpired) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sharedItemsOutgoingGetRaw({ nextPageAfter: nextPageAfter, perPage: perPage, withExpired: withExpired })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ItemApi;
}(runtime.BaseAPI));
exports.ItemApi = ItemApi;
