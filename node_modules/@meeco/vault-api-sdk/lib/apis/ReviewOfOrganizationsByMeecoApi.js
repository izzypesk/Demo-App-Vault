"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var ReviewOfOrganizationsByMeecoApi = /** @class */ (function (_super) {
    __extends(ReviewOfOrganizationsByMeecoApi, _super);
    function ReviewOfOrganizationsByMeecoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List all pending organization service requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organization service requests
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organization_services",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ListOrganizationsResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * List all pending organization service requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organization service requests
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesGet = function (nextPageAfter, perPage) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationServicesGetRaw({ nextPageAfter: nextPageAfter, perPage: perPage })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject a requested organization service
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesIdRejectDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling managementRequestedOrganizationServicesIdRejectDelete.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organization_services/{id}/reject".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.GetOrganizationServicebyIdResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject a requested organization service
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesIdRejectDelete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationServicesIdRejectDeleteRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate an organization service  with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  An organization service can only be used  by users if it is validated.
     * Validate a requested organization service
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesIdValidatePutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling managementRequestedOrganizationServicesIdValidatePut.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organization_services/{id}/validate".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.GetOrganizationServicebyIdResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Validate an organization service  with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  An organization service can only be used  by users if it is validated.
     * Validate a requested organization service
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationServicesIdValidatePut = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationServicesIdValidatePutRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List all pending organization requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organizations requests
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsGetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.nextPageAfter !== undefined) {
                            queryParameters['next_page_after'] = requestParameters.nextPageAfter;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organizations",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.ListOrganizationsResponse2FromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * List all pending organization requests.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * List all pending organizations requests
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsGet = function (nextPageAfter, perPage) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationsGetRaw({ nextPageAfter: nextPageAfter, perPage: perPage })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject an requested organization
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsIdRejectDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling managementRequestedOrganizationsIdRejectDelete.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organizations/{id}/reject".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.OrganizationResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Reject an organization with status `requested`  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.
     * Reject an requested organization
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsIdRejectDelete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationsIdRejectDeleteRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate an organization with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  Once an organization is validated, the following happens:  * The user who requested the organization becomes a member with role `owner` * It is now possible to invite other users as organization member * It is possible to create organization services * It is possible to link a user account as an organization agent * The organization is now visible to other users
     * Validate a requested organization
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsIdValidatePutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling managementRequestedOrganizationsIdValidatePut.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["admin_password"] = this.configuration.apiKey("admin_password"); // adminPassword authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/management/requested_organizations/{id}/validate".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.OrganizationResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Validate an organization with status `requested`.  This endpoint may be used only by Meeco. We will remove it from the public swagger file in future. This endpoint will be probably used by an internal organization management UI.  In addition to the usual session token this endpoint is secured by an additional token expected in header `admin-password`.  Once an organization is validated, the following happens:  * The user who requested the organization becomes a member with role `owner` * It is now possible to invite other users as organization member * It is possible to create organization services * It is possible to link a user account as an organization agent * The organization is now visible to other users
     * Validate a requested organization
     */
    ReviewOfOrganizationsByMeecoApi.prototype.managementRequestedOrganizationsIdValidatePut = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.managementRequestedOrganizationsIdValidatePutRaw({ id: id })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ReviewOfOrganizationsByMeecoApi;
}(runtime.BaseAPI));
exports.ReviewOfOrganizationsByMeecoApi = ReviewOfOrganizationsByMeecoApi;
