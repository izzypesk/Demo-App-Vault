/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ConnectionResponse, FastConnectionsResponse, PostConnectionsEncryptionSpaceRequest, PostConnectionsRequest } from '../models';
export interface ConnectionsConnectionIdEncryptionSpacePostRequest {
    connectionId: string;
    encryptionSpaceParams?: PostConnectionsEncryptionSpaceRequest;
}
export interface ConnectionsGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface ConnectionsIdDeleteRequest {
    id: string;
}
export interface ConnectionsIdGetRequest {
    id: string;
}
export interface ConnectionsPostRequest {
    connectionParams?: PostConnectionsRequest;
}
/**
 *
 */
export declare class ConnectionApi extends runtime.BaseAPI {
    /**
     * Add Encryption Space ID to the connection
     */
    connectionsConnectionIdEncryptionSpacePostRaw(requestParameters: ConnectionsConnectionIdEncryptionSpacePostRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Add Encryption Space ID to the connection
     */
    connectionsConnectionIdEncryptionSpacePost(connectionId: string, encryptionSpaceParams?: PostConnectionsEncryptionSpaceRequest): Promise<void>;
    /**
     * Get Connections
     */
    connectionsGetRaw(requestParameters: ConnectionsGetRequest): Promise<runtime.ApiResponse<FastConnectionsResponse>>;
    /**
     * Get Connections
     */
    connectionsGet(nextPageAfter?: string, perPage?: number): Promise<FastConnectionsResponse>;
    /**
     * Delete Connection
     */
    connectionsIdDeleteRaw(requestParameters: ConnectionsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Connection
     */
    connectionsIdDelete(id: string): Promise<void>;
    /**
     * Get Connection
     */
    connectionsIdGetRaw(requestParameters: ConnectionsIdGetRequest): Promise<runtime.ApiResponse<ConnectionResponse>>;
    /**
     * Get Connection
     */
    connectionsIdGet(id: string): Promise<ConnectionResponse>;
    /**
     * Create Connection
     */
    connectionsPostRaw(requestParameters: ConnectionsPostRequest): Promise<runtime.ApiResponse<ConnectionResponse>>;
    /**
     * Create Connection
     */
    connectionsPost(connectionParams?: PostConnectionsRequest): Promise<ConnectionResponse>;
}
