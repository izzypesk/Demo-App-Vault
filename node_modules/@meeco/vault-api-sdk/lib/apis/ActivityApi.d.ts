/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Activity, FastActivitiesResponse } from '../models';
export interface ActivitiesGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface ActivitiesIdGetRequest {
    id: string;
}
/**
 *
 */
export declare class ActivityApi extends runtime.BaseAPI {
    /**
     * Retrieves activity feed for the current user. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * Retrieve activities for feed
     */
    activitiesGetRaw(requestParameters: ActivitiesGetRequest): Promise<runtime.ApiResponse<FastActivitiesResponse>>;
    /**
     * Retrieves activity feed for the current user. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * Retrieve activities for feed
     */
    activitiesGet(nextPageAfter?: string, perPage?: number): Promise<FastActivitiesResponse>;
    /**
     * Retrieves activity for the current user
     * Retrieve activity
     */
    activitiesIdGetRaw(requestParameters: ActivitiesIdGetRequest): Promise<runtime.ApiResponse<Activity>>;
    /**
     * Retrieves activity for the current user
     * Retrieve activity
     */
    activitiesIdGet(id: string): Promise<Activity>;
}
