/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { OrganizationAgentLoginDetailResponse, OrganizationResponse, PostOrganizationRequest, UpdateOrganizationRequest, UpdateOrganizationResponse } from '../models';
export interface OrganizationsIdDeleteRequest {
    id: string;
}
export interface OrganizationsIdLoginPostRequest {
    id: string;
}
export interface OrganizationsIdPutRequest {
    id: string;
    updateOrganizationParams?: UpdateOrganizationRequest;
}
export interface OrganizationsPostRequest {
    organizationParams?: PostOrganizationRequest;
}
/**
 *
 */
export declare class OrganizationsManagingOrganizationsApi extends runtime.BaseAPI {
    /**
     * Delete a requested organization. The user who requested the organization can use this endpoint to delete the requested organization.
     * Delete a requested organization
     */
    organizationsIdDeleteRaw(requestParameters: OrganizationsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a requested organization. The user who requested the organization can use this endpoint to delete the requested organization.
     * Delete a requested organization
     */
    organizationsIdDelete(id: string): Promise<void>;
    /**
     * Login as an organization agent.  An organization agent is a non-human Vault user account acting on behalf of the organization.  An organization owner can use this endpoint to obtain a session token for the organization agent.
     * Log in as organization agent
     */
    organizationsIdLoginPostRaw(requestParameters: OrganizationsIdLoginPostRequest): Promise<runtime.ApiResponse<OrganizationAgentLoginDetailResponse>>;
    /**
     * Login as an organization agent.  An organization agent is a non-human Vault user account acting on behalf of the organization.  An organization owner can use this endpoint to obtain a session token for the organization agent.
     * Log in as organization agent
     */
    organizationsIdLoginPost(id: string): Promise<OrganizationAgentLoginDetailResponse>;
    /**
     * Modify a requested organization. The user who requested the organization can use this endpoint to modify the requested organization.
     * Update a requested organization
     */
    organizationsIdPutRaw(requestParameters: OrganizationsIdPutRequest): Promise<runtime.ApiResponse<UpdateOrganizationResponse>>;
    /**
     * Modify a requested organization. The user who requested the organization can use this endpoint to modify the requested organization.
     * Update a requested organization
     */
    organizationsIdPut(id: string, updateOrganizationParams?: UpdateOrganizationRequest): Promise<UpdateOrganizationResponse>;
    /**
     * Create an organization. The new organization has status `requested`. Organizations with status `requested` cannot have members and services and are invisible for users other than the user who created the organization. Organizations with status `requested` need to be validated or rejected by Meeco.
     * Create an organization
     */
    organizationsPostRaw(requestParameters: OrganizationsPostRequest): Promise<runtime.ApiResponse<OrganizationResponse>>;
    /**
     * Create an organization. The new organization has status `requested`. Organizations with status `requested` cannot have members and services and are invisible for users other than the user who created the organization. Organizations with status `requested` need to be validated or rejected by Meeco.
     * Create an organization
     */
    organizationsPost(organizationParams?: PostOrganizationRequest): Promise<OrganizationResponse>;
}
