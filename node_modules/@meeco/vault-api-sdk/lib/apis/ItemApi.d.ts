/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { IncomingSharesResponse, ItemResponse, ItemsResponse, PostFastItemsRequest, PutFastItemsRequest } from '../models';
export interface ItemsGetRequest {
    templateIds?: string;
    nextPageAfter?: string;
    perPage?: number;
}
export interface ItemsIdDeleteRequest {
    id: string;
}
export interface ItemsIdGetRequest {
    id: string;
}
export interface ItemsIdPutRequest {
    id: string;
    updateItemParams?: PutFastItemsRequest;
}
export interface ItemsPostRequest {
    createItemParams?: PostFastItemsRequest;
}
export interface SharedItemsIncomingGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface SharedItemsOutgoingGetRequest {
    nextPageAfter?: string;
    perPage?: number;
    withExpired?: boolean;
}
/**
 *
 */
export declare class ItemApi extends runtime.BaseAPI {
    /**
     * Fetch items of the current user.
     * Get your own items
     */
    itemsGetRaw(requestParameters: ItemsGetRequest): Promise<runtime.ApiResponse<ItemsResponse>>;
    /**
     * Fetch items of the current user.
     * Get your own items
     */
    itemsGet(templateIds?: string, nextPageAfter?: string, perPage?: number): Promise<ItemsResponse>;
    /**
     * Delete a specific Item by `id`.
     * Delete Item
     */
    itemsIdDeleteRaw(requestParameters: ItemsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific Item by `id`.
     * Delete Item
     */
    itemsIdDelete(id: string): Promise<void>;
    /**
     * Retrieve a specific Item by `id`.
     * Get Item
     */
    itemsIdGetRaw(requestParameters: ItemsIdGetRequest): Promise<runtime.ApiResponse<ItemResponse>>;
    /**
     * Retrieve a specific Item by `id`.
     * Get Item
     */
    itemsIdGet(id: string): Promise<ItemResponse>;
    /**
     * Update an Item specified by `id` with fields provided in the JSON body.
     * Update Item
     */
    itemsIdPutRaw(requestParameters: ItemsIdPutRequest): Promise<runtime.ApiResponse<ItemResponse>>;
    /**
     * Update an Item specified by `id` with fields provided in the JSON body.
     * Update Item
     */
    itemsIdPut(id: string, updateItemParams?: PutFastItemsRequest): Promise<ItemResponse>;
    /**
     * Create an Item populated with slot data carried in payload. Slot records are created and associated with the item by the server.
     * Create Item
     */
    itemsPostRaw(requestParameters: ItemsPostRequest): Promise<runtime.ApiResponse<ItemResponse>>;
    /**
     * Create an Item populated with slot data carried in payload. Slot records are created and associated with the item by the server.
     * Create Item
     */
    itemsPost(createItemParams?: PostFastItemsRequest): Promise<ItemResponse>;
    /**
     * Get items shared with the current user. Items of expired shares are not shown. For slot shares its items are also served. For item shares all slots of the item are served. The values of slots are in Share objects in field `encrypted_values`. `encrypted_values` is a map where the keys are slot IDs and values are encrypted slot values.
     * List items shared with me
     */
    sharedItemsIncomingGetRaw(requestParameters: SharedItemsIncomingGetRequest): Promise<runtime.ApiResponse<IncomingSharesResponse>>;
    /**
     * Get items shared with the current user. Items of expired shares are not shown. For slot shares its items are also served. For item shares all slots of the item are served. The values of slots are in Share objects in field `encrypted_values`. `encrypted_values` is a map where the keys are slot IDs and values are encrypted slot values.
     * List items shared with me
     */
    sharedItemsIncomingGet(nextPageAfter?: string, perPage?: number): Promise<IncomingSharesResponse>;
    /**
     * Get items the current shared has shared with others. By default items of expired shares are not served. Adding parameter `with_expired` will result in serving all shares items and slots including expired shares.
     * List your items shared with others
     */
    sharedItemsOutgoingGetRaw(requestParameters: SharedItemsOutgoingGetRequest): Promise<runtime.ApiResponse<IncomingSharesResponse>>;
    /**
     * Get items the current shared has shared with others. By default items of expired shares are not served. Adding parameter `with_expired` will result in serving all shares items and slots including expired shares.
     * List your items shared with others
     */
    sharedItemsOutgoingGet(nextPageAfter?: string, perPage?: number, withExpired?: boolean): Promise<IncomingSharesResponse>;
}
