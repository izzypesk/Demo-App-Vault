/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { FastSharesOutgoingResponse, PostShareRequestsRequest, PostSharesRequest, PutSharesRequest, ShareRequestResponse, ShareResponse, SharesResponse } from '../models';
export interface ShareRequestsIdDeleteRequest {
    id: string;
}
export interface ShareRequestsPostRequest {
    shareRequestParams?: PostShareRequestsRequest;
}
export interface SharesIdDeleteRequest {
    id: string;
}
export interface SharesIdGetRequest {
    id: string;
}
export interface SharesIncomingGetRequest {
    nextPageAfter?: string;
    perPage?: number;
}
export interface SharesOutgoingGetRequest {
    nextPageAfter?: string;
    perPage?: number;
    withExpired?: boolean;
}
export interface SharesPostRequest {
    createSharesParams?: PostSharesRequest;
}
export interface SharesPutRequest {
    updateSharesParams?: PutSharesRequest;
}
/**
 *
 */
export declare class SharesApi extends runtime.BaseAPI {
    /**
     * Delete a new share request. Only the creator of a share request can delete it.
     * Delete a share request
     */
    shareRequestsIdDeleteRaw(requestParameters: ShareRequestsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a new share request. Only the creator of a share request can delete it.
     * Delete a share request
     */
    shareRequestsIdDelete(id: string): Promise<void>;
    /**
     * Create a new share request
     * Create a new share request
     */
    shareRequestsPostRaw(requestParameters: ShareRequestsPostRequest): Promise<runtime.ApiResponse<ShareRequestResponse>>;
    /**
     * Create a new share request
     * Create a new share request
     */
    shareRequestsPost(shareRequestParams?: PostShareRequestsRequest): Promise<ShareRequestResponse>;
    /**
     * Delete a share. Both the owner of the shared data and the recipient of the share can delete the share
     * Delete Share
     */
    sharesIdDeleteRaw(requestParameters: SharesIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a share. Both the owner of the shared data and the recipient of the share can delete the share
     * Delete Share
     */
    sharesIdDelete(id: string): Promise<void>;
    /**
     * Retrieve a share together with associated data: the shared item, slots, associations, attachments, thumbnails, and classification nodes. Both the sender and the recipient of the share can read this share. Depending on who is reading the share the correct encryption space and the correct connection are served.
     * Retrieve a share together with shared items, slots, and associated data
     */
    sharesIdGetRaw(requestParameters: SharesIdGetRequest): Promise<runtime.ApiResponse<ShareResponse>>;
    /**
     * Retrieve a share together with associated data: the shared item, slots, associations, attachments, thumbnails, and classification nodes. Both the sender and the recipient of the share can read this share. Depending on who is reading the share the correct encryption space and the correct connection are served.
     * Retrieve a share together with shared items, slots, and associated data
     */
    sharesIdGet(id: string): Promise<ShareResponse>;
    /**
     * Retrieve a list of shares that the current user has received. Only valid non-expired shares are shown.
     * Retrieve a list of shares that the current user has received
     */
    sharesIncomingGetRaw(requestParameters: SharesIncomingGetRequest): Promise<runtime.ApiResponse<FastSharesOutgoingResponse>>;
    /**
     * Retrieve a list of shares that the current user has received. Only valid non-expired shares are shown.
     * Retrieve a list of shares that the current user has received
     */
    sharesIncomingGet(nextPageAfter?: string, perPage?: number): Promise<FastSharesOutgoingResponse>;
    /**
     * Retrieve a list of shares by the current user. By default only non-expired shares are served, but it can be changed via parameter
     * Retrieve a list of shares by the current user
     */
    sharesOutgoingGetRaw(requestParameters: SharesOutgoingGetRequest): Promise<runtime.ApiResponse<FastSharesOutgoingResponse>>;
    /**
     * Retrieve a list of shares by the current user. By default only non-expired shares are served, but it can be changed via parameter
     * Retrieve a list of shares by the current user
     */
    sharesOutgoingGet(nextPageAfter?: string, perPage?: number, withExpired?: boolean): Promise<FastSharesOutgoingResponse>;
    /**
     * Share items or slots with another user
     * Create Shares
     */
    sharesPostRaw(requestParameters: SharesPostRequest): Promise<runtime.ApiResponse<SharesResponse>>;
    /**
     * Share items or slots with another user
     * Create Shares
     */
    sharesPost(createSharesParams?: PostSharesRequest): Promise<SharesResponse>;
    /**
     * Update shares. Only the owner of the shared data can update a share. Optionally a list of `ClientTask` objects can be submitted. See `PUT /client_tasks` for more details about `ClientTask`\'s
     * Update shares
     */
    sharesPutRaw(requestParameters: SharesPutRequest): Promise<runtime.ApiResponse<SharesResponse>>;
    /**
     * Update shares. Only the owner of the shared data can update a share. Optionally a list of `ClientTask` objects can be submitted. See `PUT /client_tasks` for more details about `ClientTask`\'s
     * Update shares
     */
    sharesPut(updateSharesParams?: PutSharesRequest): Promise<SharesResponse>;
}
