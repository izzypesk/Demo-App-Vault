"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete the account associated with the currently authenticated user.
     * Delete an account
     */
    UserApi.prototype.meDeleteRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete the account associated with the currently authenticated user.
     * Delete an account
     */
    UserApi.prototype.meDelete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.meDeleteRaw()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes the account associated with the currently authenticated user from the queue for asynchronous deletion.
     * Remove current user from queue for deletion
     */
    UserApi.prototype.meDeletionQueueDeleteRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me/deletion_queue",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Removes the account associated with the currently authenticated user from the queue for asynchronous deletion.
     * Remove current user from queue for deletion
     */
    UserApi.prototype.meDeletionQueueDelete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.meDeletionQueueDeleteRaw()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Queues the account associated with the currently authenticated user for asynchronous deletion.
     * Queue current user for deletion
     */
    UserApi.prototype.meDeletionQueuePostRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me/deletion_queue",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.DeletionQueueItemResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Queues the account associated with the currently authenticated user for asynchronous deletion.
     * Queue current user for deletion
     */
    UserApi.prototype.meDeletionQueuePost = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.meDeletionQueuePostRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns account details for the currently authenticated user.
     * Show current user
     */
    UserApi.prototype.meGetRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.MeResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns account details for the currently authenticated user.
     * Show current user
     */
    UserApi.prototype.meGet = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.meGetRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Request a password reset token to be sent to the specified email address.
     * Request a password reset
     */
    UserApi.prototype.mePasswordPutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.userEmail === null || requestParameters.userEmail === undefined) {
                            throw new runtime.RequiredError('userEmail', 'Required parameter requestParameters.userEmail was null or undefined when calling mePasswordPut.');
                        }
                        queryParameters = {};
                        if (requestParameters.requestOrigin !== undefined) {
                            queryParameters['request_origin'] = requestParameters.requestOrigin;
                        }
                        if (requestParameters.userEmail !== undefined) {
                            queryParameters['user[email]'] = requestParameters.userEmail;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me/password",
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Request a password reset token to be sent to the specified email address.
     * Request a password reset
     */
    UserApi.prototype.mePasswordPut = function (userEmail, requestOrigin) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mePasswordPutRaw({ userEmail: userEmail, requestOrigin: requestOrigin })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Takes a public key and an admission token and creates a user account.
     * Create a user
     */
    UserApi.prototype.mePostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PostMeRequestToJSON(requestParameters.createUserParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.PostMeResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Takes a public key and an admission token and creates a user account.
     * Create a user
     */
    UserApi.prototype.mePost = function (createUserParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mePostRaw({ createUserParams: createUserParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Updates details for the currently authenticated user.
     * Update current user
     */
    UserApi.prototype.mePutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // userAuthToken authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me",
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PutMeRequestToJSON(requestParameters.updateUserParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return models_1.MeResponseFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     * Updates details for the currently authenticated user.
     * Update current user
     */
    UserApi.prototype.mePut = function (updateUserParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mePutRaw({ updateUserParams: updateUserParams })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Takes an email and a password, and creates a user.
     * Create a user
     */
    UserApi.prototype.meWithPasswordPostRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Meeco-Subscription-Key"] = this.configuration.apiKey("Meeco-Subscription-Key"); // subscriptionKey authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/me/with_password",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: models_1.PostMeWithPasswordRequestToJSON(requestParameters.createUserWithPwdParams),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Takes an email and a password, and creates a user.
     * Create a user
     */
    UserApi.prototype.meWithPasswordPost = function (createUserWithPwdParams) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.meWithPasswordPostRaw({ createUserWithPwdParams: createUserWithPwdParams })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return UserApi;
}(runtime.BaseAPI));
exports.UserApi = UserApi;
