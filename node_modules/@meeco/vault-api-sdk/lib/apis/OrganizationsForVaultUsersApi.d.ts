/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { GetOrganizationServicebyIdResponse, GetOrganizationbyIdResponse, ListOrganizationsResponse1 } from '../models';
export interface OrganizationsGetRequest {
    mode?: string;
    nextPageAfter?: string;
    perPage?: number;
}
export interface OrganizationsIdGetRequest {
    id: string;
}
export interface OrganizationsOrganizationIdServicesIdGetRequest {
    organizationId: string;
    id: string;
}
/**
 *
 */
export declare class OrganizationsForVaultUsersApi extends runtime.BaseAPI {
    /**
     * List organization.  There are three modes:  * List all validated organizations. This is the default behavior. * List organizations in the requested state that the current user has requested. Submit parameter `mode=requested` * List organizations in which the current user is a member. Submit parameter `mode=member`
     * List organizations
     */
    organizationsGetRaw(requestParameters: OrganizationsGetRequest): Promise<runtime.ApiResponse<ListOrganizationsResponse1>>;
    /**
     * List organization.  There are three modes:  * List all validated organizations. This is the default behavior. * List organizations in the requested state that the current user has requested. Submit parameter `mode=requested` * List organizations in which the current user is a member. Submit parameter `mode=member`
     * List organizations
     */
    organizationsGet(mode?: string, nextPageAfter?: string, perPage?: number): Promise<ListOrganizationsResponse1>;
    /**
     * Retrieve a validated organization or a requested organization.  This endpoint works in 2 modes:  * a validated organization is readable by everyone * a requested non-validated organization is only readable by the requestor
     * Retrieve a validated organization or a requested organization
     */
    organizationsIdGetRaw(requestParameters: OrganizationsIdGetRequest): Promise<runtime.ApiResponse<GetOrganizationbyIdResponse>>;
    /**
     * Retrieve a validated organization or a requested organization.  This endpoint works in 2 modes:  * a validated organization is readable by everyone * a requested non-validated organization is only readable by the requestor
     * Retrieve a validated organization or a requested organization
     */
    organizationsIdGet(id: string): Promise<GetOrganizationbyIdResponse>;
    /**
     * Retrieve a validated organization service.  This endpoint can be called by anyone.  Only validated organizations and services are accessible.
     * Retrieve a validated organization service
     */
    organizationsOrganizationIdServicesIdGetRaw(requestParameters: OrganizationsOrganizationIdServicesIdGetRequest): Promise<runtime.ApiResponse<GetOrganizationServicebyIdResponse>>;
    /**
     * Retrieve a validated organization service.  This endpoint can be called by anyone.  Only validated organizations and services are accessible.
     * Retrieve a validated organization service
     */
    organizationsOrganizationIdServicesIdGet(organizationId: string, id: string): Promise<GetOrganizationServicebyIdResponse>;
}
