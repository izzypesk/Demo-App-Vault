/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ListOrganizationMemberResponse, UpdateOrganizationMemberRoleRequest } from '../models';
export interface OrganizationsOrganizationIdMembersGetRequest {
    organizationId: string;
    nextPageAfter?: string;
    perPage?: number;
}
export interface OrganizationsOrganizationIdMembersIdDeleteRequest {
    organizationId: string;
    id: string;
}
export interface OrganizationsOrganizationIdMembersIdPutRequest {
    organizationId: string;
    id: string;
    organizationMemberRoleParams?: UpdateOrganizationMemberRoleRequest;
}
/**
 *
 */
export declare class OrganizationsManagingMembersApi extends runtime.BaseAPI {
    /**
     * List all members of an organization.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services
     * List all members of an organization
     */
    organizationsOrganizationIdMembersGetRaw(requestParameters: OrganizationsOrganizationIdMembersGetRequest): Promise<runtime.ApiResponse<ListOrganizationMemberResponse>>;
    /**
     * List all members of an organization.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services
     * List all members of an organization
     */
    organizationsOrganizationIdMembersGet(organizationId: string, nextPageAfter?: string, perPage?: number): Promise<ListOrganizationMemberResponse>;
    /**
     * Delete a member of an organization.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services  The system will not allow to delete the last owner of the organization.
     * Delete a member of an organization
     */
    organizationsOrganizationIdMembersIdDeleteRaw(requestParameters: OrganizationsOrganizationIdMembersIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a member of an organization.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services  The system will not allow to delete the last owner of the organization.
     * Delete a member of an organization
     */
    organizationsOrganizationIdMembersIdDelete(organizationId: string, id: string): Promise<void>;
    /**
     * Change the role of a member.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services  The system will not allow to demote the last owner of the organization.
     * Change the role of a member
     */
    organizationsOrganizationIdMembersIdPutRaw(requestParameters: OrganizationsOrganizationIdMembersIdPutRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Change the role of a member.  This endpoint is only accessible to organization owners.  There are currently 2 member roles:  * `owner` - can do everything * `admin` - can only manage organization services  The system will not allow to demote the last owner of the organization.
     * Change the role of a member
     */
    organizationsOrganizationIdMembersIdPut(organizationId: string, id: string, organizationMemberRoleParams?: UpdateOrganizationMemberRoleRequest): Promise<void>;
}
