/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateOrganizationServiceResponse, ListOrganizationsResponse, OrganizationAgentLoginDetailResponse, PostOrganizationServiceRequest, UpdateOrganizationServiceRequest } from '../models';
export interface OrganizationsOrganizationIdRequestedServicesGetRequest {
    organizationId: string;
    nextPageAfter?: string;
    perPage?: number;
}
export interface OrganizationsOrganizationIdServicesIdDeleteRequest {
    id: string;
    organizationId: string;
}
export interface OrganizationsOrganizationIdServicesIdLoginPostRequest {
    organizationId: string;
    id: string;
}
export interface OrganizationsOrganizationIdServicesIdPutRequest {
    id: string;
    organizationId: string;
    updateOrganizationServiceParams?: UpdateOrganizationServiceRequest;
}
export interface OrganizationsOrganizationIdServicesPostRequest {
    organizationId: string;
    organizationServiceParams?: PostOrganizationServiceRequest;
}
/**
 *
 */
export declare class OrganizationsManagingServicesApi extends runtime.BaseAPI {
    /**
     * List requested services for a given organization.  Members of the organization with roles `owner` and `admin` can use this endpoint to list the requested services for this organization.
     * List requested services for a given organization
     */
    organizationsOrganizationIdRequestedServicesGetRaw(requestParameters: OrganizationsOrganizationIdRequestedServicesGetRequest): Promise<runtime.ApiResponse<ListOrganizationsResponse>>;
    /**
     * List requested services for a given organization.  Members of the organization with roles `owner` and `admin` can use this endpoint to list the requested services for this organization.
     * List requested services for a given organization
     */
    organizationsOrganizationIdRequestedServicesGet(organizationId: string, nextPageAfter?: string, perPage?: number): Promise<ListOrganizationsResponse>;
    /**
     * Delete a requested organization service. Organization members with roles `admin` and `owner` can use this endpoint to delete a requested organization.
     * Delete a requested organization service
     */
    organizationsOrganizationIdServicesIdDeleteRaw(requestParameters: OrganizationsOrganizationIdServicesIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a requested organization service. Organization members with roles `admin` and `owner` can use this endpoint to delete a requested organization.
     * Delete a requested organization service
     */
    organizationsOrganizationIdServicesIdDelete(id: string, organizationId: string): Promise<void>;
    /**
     * Login as a service agent.  An service agent is a non-human Vault user account acting on behalf of the service.  An organization owner or admin can use this endpoint to obtain a session token for the service agent.
     * Log in as organization service agent
     */
    organizationsOrganizationIdServicesIdLoginPostRaw(requestParameters: OrganizationsOrganizationIdServicesIdLoginPostRequest): Promise<runtime.ApiResponse<OrganizationAgentLoginDetailResponse>>;
    /**
     * Login as a service agent.  An service agent is a non-human Vault user account acting on behalf of the service.  An organization owner or admin can use this endpoint to obtain a session token for the service agent.
     * Log in as organization service agent
     */
    organizationsOrganizationIdServicesIdLoginPost(organizationId: string, id: string): Promise<OrganizationAgentLoginDetailResponse>;
    /**
     * Modify a requested organization service. Members of the organization with roles `owner` and `admin` can use this endpoint to modify the requested service.
     * Update a requested organization service
     */
    organizationsOrganizationIdServicesIdPutRaw(requestParameters: OrganizationsOrganizationIdServicesIdPutRequest): Promise<runtime.ApiResponse<CreateOrganizationServiceResponse>>;
    /**
     * Modify a requested organization service. Members of the organization with roles `owner` and `admin` can use this endpoint to modify the requested service.
     * Update a requested organization service
     */
    organizationsOrganizationIdServicesIdPut(id: string, organizationId: string, updateOrganizationServiceParams?: UpdateOrganizationServiceRequest): Promise<CreateOrganizationServiceResponse>;
    /**
     * Create an organization service. Organization members with roles `admin` and `owner` can create an organization service. The new organization service has status `requested`. Organization services with status `requested` cannot be used and are invisible for users other than the member of the organization which requested the service. Services with status `requested` need to be validated or rejected by Meeco.
     * Create an organization service
     */
    organizationsOrganizationIdServicesPostRaw(requestParameters: OrganizationsOrganizationIdServicesPostRequest): Promise<runtime.ApiResponse<CreateOrganizationServiceResponse>>;
    /**
     * Create an organization service. Organization members with roles `admin` and `owner` can create an organization service. The new organization service has status `requested`. Organization services with status `requested` cannot be used and are invisible for users other than the member of the organization which requested the service. Services with status `requested` need to be validated or rejected by Meeco.
     * Create an organization service
     */
    organizationsOrganizationIdServicesPost(organizationId: string, organizationServiceParams?: PostOrganizationServiceRequest): Promise<CreateOrganizationServiceResponse>;
}
