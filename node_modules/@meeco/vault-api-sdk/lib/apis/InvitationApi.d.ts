/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InvitationResponse, InvitationsResponse, PostInvitationsRequest } from '../models';
export interface InvitationsGetRequest {
    nextPageAfter?: string;
    perPage?: number;
    token?: string;
}
export interface InvitationsIdDeleteRequest {
    id: string;
}
export interface InvitationsPostRequest {
    invitationParams?: PostInvitationsRequest;
}
/**
 *
 */
export declare class InvitationApi extends runtime.BaseAPI {
    /**
     * Retrieves invitations for the current user or by token and email. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * List Invitations
     */
    invitationsGetRaw(requestParameters: InvitationsGetRequest): Promise<runtime.ApiResponse<InvitationsResponse>>;
    /**
     * Retrieves invitations for the current user or by token and email. The results are sorted in reverse chronological order (ie most recent first) and paginated, with both items per page and the page to display being parameterized (passed in query string).
     * List Invitations
     */
    invitationsGet(nextPageAfter?: string, perPage?: number, token?: string): Promise<InvitationsResponse>;
    /**
     * Delete an Invitation
     */
    invitationsIdDeleteRaw(requestParameters: InvitationsIdDeleteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an Invitation
     */
    invitationsIdDelete(id: string): Promise<void>;
    /**
     * An invitation to connect with another user. Before anything can be shared, 2 users need to establish a connection. To create a connection user has to submit an invitation.  An invitation can also be used by an organization agent to invite other users to become organization members. In this case parameter `organization_member_role` is used to specify the role.  There are currently 2 organization member roles: * `owner` - can do everything * `admin` (default) - can only manage organization services  If organization_member_role param is not provided then default `admin` role will be assigned to the invited member.
     * Submit an Invitation
     */
    invitationsPostRaw(requestParameters: InvitationsPostRequest): Promise<runtime.ApiResponse<InvitationResponse>>;
    /**
     * An invitation to connect with another user. Before anything can be shared, 2 users need to establish a connection. To create a connection user has to submit an invitation.  An invitation can also be used by an organization agent to invite other users to become organization members. In this case parameter `organization_member_role` is used to specify the role.  There are currently 2 organization member roles: * `owner` - can do everything * `admin` (default) - can only manage organization services  If organization_member_role param is not provided then default `admin` role will be assigned to the invited member.
     * Submit an Invitation
     */
    invitationsPost(invitationParams?: PostInvitationsRequest): Promise<InvitationResponse>;
}
