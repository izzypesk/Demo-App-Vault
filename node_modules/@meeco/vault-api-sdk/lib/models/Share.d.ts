/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A record of a share of data (Item and its Slots, or a single Slot) between connected users with conditions under which that data can be used
 * @export
 * @interface Share
 */
export interface Share {
    /**
     *
     * @type {string}
     * @memberof Share
     */
    id: string;
    /**
     * ID of the owner of the shared data
     * @type {string}
     * @memberof Share
     */
    sender_id: string;
    /**
     * ID of the recipient of the share
     * @type {string}
     * @memberof Share
     */
    recipient_id: string;
    /**
     * True if the current user is the owner of the data, false if the current user is the recipient of the share
     * @type {boolean}
     * @memberof Share
     */
    outgoing: boolean;
    /**
     * 'Item' or 'Slot'
     * @type {string}
     * @memberof Share
     */
    shareable_type: string;
    /**
     * ID of the shared item or slot
     * @type {string}
     * @memberof Share
     */
    shareable_id: string;
    /**
     * if the share is a share of an item, this is the ID of the shared item,if the share is a share of a slot,  this is the ID of the item of the shared slot
     * @type {string}
     * @memberof Share
     */
    item_id: string;
    /**
     * ID of the DEK in Meeco Keystore used to encrypt the values
     * @type {string}
     * @memberof Share
     */
    encryption_space_id: string | null;
    /**
     * ID of the connection between the sender of the share and the reciever of the share
     * @type {string}
     * @memberof Share
     */
    connection_id: string;
    /**
     *
     * @type {string}
     * @memberof Share
     */
    note: string | null;
    /**
     * Expiration date of the share
     * @type {Date}
     * @memberof Share
     */
    expires_at: Date | null;
    /**
     *
     * @type {string}
     * @memberof Share
     */
    terms: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Share
     */
    tradeable: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Share
     */
    distributable: boolean;
}
export declare function ShareFromJSON(json: any): Share;
export declare function ShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): Share;
export declare function ShareToJSON(value?: Share | null): any;
