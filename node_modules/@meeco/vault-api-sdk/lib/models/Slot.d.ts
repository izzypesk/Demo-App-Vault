/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Slot instances provide a dynamic way to add arbitrary attributes to Tile instances.
 *           This ability to add attributes dynamically to Tile instances enables extensibility within the information model.
 *           A Slot is composed of a name, a label, a SlotType and a value. The value is an object whose type is determined by the SlotType.
 * @export
 * @interface Slot
 */
export interface Slot {
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    id: string;
    /**
     * true if the slot belongs to the current user, false if this slot is shared with the current user
     * @type {boolean}
     * @memberof Slot
     */
    own: boolean;
    /**
     * If the slot is shared with the current user, `share_id` points to the share record
     * @type {string}
     * @memberof Slot
     */
    share_id: string | null;
    /**
     * Machine-readable string.
     * @type {string}
     * @memberof Slot
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    description: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Slot
     */
    encrypted: boolean;
    /**
     *
     * @type {number}
     * @memberof Slot
     */
    ordinal: number;
    /**
     *
     * @type {boolean}
     * @memberof Slot
     */
    visible: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof Slot
     */
    classification_node_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Slot
     */
    attachment_ids: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    slotable_id: string | null;
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    slotable_type: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Slot
     */
    required: boolean;
    /**
     *
     * @type {Date}
     * @memberof Slot
     */
    updated_at: Date;
    /**
     *
     * @type {Date}
     * @memberof Slot
     */
    created_at: Date;
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    slot_type_name: string;
    /**
     * creator of record, can be user or system
     * @type {string}
     * @memberof Slot
     */
    creator: string | null;
    /**
     * If field `own` is `true`, this value is encrypted with the default DEK of the user (`private_encryption_space_id`). If field `own` is `false`, this is a shared slot, `share_id` points to the corresponding share,and the value is encrypted with the encryption space referenced from the share object
     * @type {string}
     * @memberof Slot
     */
    encrypted_value: string | null;
    /**
     *
     * @type {string}
     * @memberof Slot
     */
    image: string | null;
    /**
     * String for display.
     * @type {string}
     * @memberof Slot
     */
    label: string;
}
export declare function SlotFromJSON(json: any): Slot;
export declare function SlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): Slot;
export declare function SlotToJSON(value?: Slot | null): any;
