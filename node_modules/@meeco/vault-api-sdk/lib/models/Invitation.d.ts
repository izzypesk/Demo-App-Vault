/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Represents one user's intention to create a Connection with another, facilitating sharing.
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    id: string;
    /**
     * Email address to send invitation link (legacy).
     * @type {string}
     * @memberof Invitation
     */
    email: string | null;
    /**
     * Message to send along with invitation (legacy).
     * @type {string}
     * @memberof Invitation
     */
    message: string | null;
    /**
     *
     * @type {Date}
     * @memberof Invitation
     */
    sent_at: Date | null;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    invited_user_id: string | null;
    /**
     * Unique string that invitee uses to create Connection.
     * @type {string}
     * @memberof Invitation
     */
    token: string;
    /**
     *
     * @type {boolean}
     * @memberof Invitation
     */
    outgoing: boolean;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    user_name: string;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    user_image: string | null;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    user_email: string;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    keypair_external_id: string;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    encrypted_recipient_name: string;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    integration_data: string | null;
}
export declare function InvitationFromJSON(json: any): Invitation;
export declare function InvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invitation;
export declare function InvitationToJSON(value?: Invitation | null): any;
