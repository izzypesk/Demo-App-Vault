/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A ClientTask represents a task the client is supposed to perform.
 * Field `work_type` represents a type of work, `target_id` points to the input argument of the task and its semantics depends on `work_type`.
 * Currently there is only one work type: `update_share`. In an `update_share` task`target_id` points to a share. `update_share` tasks are created when for all shares of an item when the item is changed. Clients are expected to re-encrypt encrypted values of the the shared items for a share.
 * Each ClientTask may have the following states:
 * * `todo`
 * * `in_progress`
 * * `done`
 * * `failed`
 * @export
 * @interface ClientTask
 */
export interface ClientTask {
    /**
     *
     * @type {string}
     * @memberof ClientTask
     */
    id: string;
    /**
     * Each ClientTask may have the following states:
     * * `todo`
     * * `in_progress`
     * * `done`
     * * `failed`
     * @type {string}
     * @memberof ClientTask
     */
    state: string;
    /**
     * Field `work_type` represents a type of work.
     * @type {string}
     * @memberof ClientTask
     */
    work_type: string;
    /**
     * `target_id` points to the input argument of the task and its semantics depends on `work_type`
     * @type {string}
     * @memberof ClientTask
     */
    target_id: string;
    /**
     * Additional options to perform the task
     * @type {object}
     * @memberof ClientTask
     */
    additional_options: object;
    /**
     * Timestamp when the state of the task was changed
     * @type {Date}
     * @memberof ClientTask
     */
    last_state_transition_at: Date | null;
    /**
     * Task execution report. A report is a JSON object. A report can be useful for failed tasks.
     * @type {object}
     * @memberof ClientTask
     */
    report: object;
    /**
     *
     * @type {Date}
     * @memberof ClientTask
     */
    created_at: Date;
}
export declare function ClientTaskFromJSON(json: any): ClientTask;
export declare function ClientTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientTask;
export declare function ClientTaskToJSON(value?: ClientTask | null): any;
