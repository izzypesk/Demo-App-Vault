/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Exhaustive schema of user properties.
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    full_name: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    is_app_logging_enabled: boolean | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    image: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    country: string | null;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    joined_at: Date | null;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    onboarded_at: Date | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    track_events: boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    track_usage: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    cloudname: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    timezone: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    unconfirmed_email: string | null;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    verified_at: Date | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    share_terms: string | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    using_key_store: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    key_store_admission_token: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    encryption_engine_admission_token: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    key_store_id: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    key_store_url: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    key_store_username: string | null;
    /**
     * ID of the encryption space in the keystore containing the main DEK used to encrypt items
     * @type {string}
     * @memberof User
     */
    private_encryption_space_id: string | null;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    queued_for_deletion_after: Date | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    using_shadow_key: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    accepted_terms: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof User
     */
    association_ids: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    using_api_set_key_store_passphrase: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    api_set_key_store_passphrase: Date | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    user_type?: string | null;
}
export declare function UserFromJSON(json: any): User;
export declare function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User;
export declare function UserToJSON(value?: User | null): any;
