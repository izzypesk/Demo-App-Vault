/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An Item represents an instance of a Life object such as the White House, your pet dog Spot or your Estonian passport
 * @export
 * @interface Item
 */
export interface Item {
    /**
     *
     * @type {string}
     * @memberof Item
     */
    id: string;
    /**
     * true if the item belongs to the current user, false if this item is shared with the current user
     * @type {boolean}
     * @memberof Item
     */
    own: boolean;
    /**
     * Machine-readable string.
     * @type {string}
     * @memberof Item
     */
    name: string;
    /**
     * String for display.
     * @type {string}
     * @memberof Item
     */
    label: string;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    description: string;
    /**
     *
     * @type {Date}
     * @memberof Item
     */
    created_at: Date;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    item_template_id: string;
    /**
     * Determines position in collection.
     * @type {number}
     * @memberof Item
     */
    ordinal: number;
    /**
     *
     * @type {boolean}
     * @memberof Item
     */
    visible: boolean;
    /**
     *
     * @type {Date}
     * @memberof Item
     */
    updated_at: Date;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    item_template_label: string;
    /**
     *
     * @type {boolean}
     * @memberof Item
     */
    shareable: boolean;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    image: string | null;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    item_image: string | null;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    item_image_background_colour: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof Item
     */
    classification_node_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Item
     */
    association_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Item
     */
    associations_to_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Item
     */
    slot_ids: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof Item
     */
    me: boolean;
    /**
     *
     * @type {string}
     * @memberof Item
     */
    background_color: string | null;
    /**
     * The number of times this item has been shared including expired shares. Only visible to the owner of the item.
     * @type {number}
     * @memberof Item
     */
    share_count: number | null;
    /**
     * The number of times this item has been shared excluding expired shares. Only visible to the owner of the item.
     * @type {number}
     * @memberof Item
     */
    valid_share_count: number | null;
}
export declare function ItemFromJSON(json: any): Item;
export declare function ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Item;
export declare function ItemToJSON(value?: Item | null): any;
