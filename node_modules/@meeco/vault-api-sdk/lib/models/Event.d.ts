/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The internal representation of database changes that can be displayed as Activities.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     *
     * @type {string}
     * @memberof Event
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    parent_id: string | null;
    /**
     * creator of record, can be user or system
     * @type {string}
     * @memberof Event
     */
    creator: string | null;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    user_id: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    eventable_type: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    eventable_id: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    event_type: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    name: string | null;
    /**
     * String for display.
     * @type {string}
     * @memberof Event
     */
    label: string | null;
    /**
     *
     * @type {object}
     * @memberof Event
     */
    value: object | null;
    /**
     *
     * @type {number}
     * @memberof Event
     */
    duration_in_seconds: number | null;
    /**
     *
     * @type {Array<string>}
     * @memberof Event
     */
    activity_ids: Array<string>;
}
export declare function EventFromJSON(json: any): Event;
export declare function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event;
export declare function EventToJSON(value?: Event | null): any;
