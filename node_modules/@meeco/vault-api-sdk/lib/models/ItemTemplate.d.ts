/**
 * Vault
 * Storage for encrypted user data. User data cannot be decrypted and read by Meeco. To access the Vault, the user must have a user and all associated keys and secrets. The keys and secrets are accesed through the user of the Keystore API. In the current implementation the Vault functionality is implemented by the meeco-vault
 *
 * The version of the OpenAPI document: 11.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The format in which ItemTemplates are returned when you enter the card creation flow
 * @export
 * @interface ItemTemplate
 */
export interface ItemTemplate {
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    id: string;
    /**
     * Machine-readable string.
     * @type {string}
     * @memberof ItemTemplate
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    description: string;
    /**
     * Determines position in collection.
     * @type {number}
     * @memberof ItemTemplate
     */
    ordinal: number;
    /**
     *
     * @type {boolean}
     * @memberof ItemTemplate
     */
    visible: boolean;
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    user_id: string | null;
    /**
     *
     * @type {Date}
     * @memberof ItemTemplate
     */
    updated_at: Date;
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    image: string | null;
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    template_type: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof ItemTemplate
     */
    classification_node_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ItemTemplate
     */
    association_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ItemTemplate
     */
    associations_to_ids: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ItemTemplate
     */
    slot_ids: Array<string>;
    /**
     * String for display.
     * @type {string}
     * @memberof ItemTemplate
     */
    label: string;
    /**
     *
     * @type {string}
     * @memberof ItemTemplate
     */
    background_color: string | null;
}
export declare function ItemTemplateFromJSON(json: any): ItemTemplate;
export declare function ItemTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemTemplate;
export declare function ItemTemplateToJSON(value?: ItemTemplate | null): any;
