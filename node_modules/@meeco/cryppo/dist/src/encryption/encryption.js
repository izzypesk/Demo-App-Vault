"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptWithKey = exports.encryptWithKeyDerivedFromString = exports.encryptWithGeneratedKey = void 0;
var node_forge_1 = require("node-forge");
var pbkdf2_hmac_1 = require("../key-derivation/pbkdf2-hmac");
var serialization_versions_1 = require("../serialization-versions");
var util_1 = require("../util");
/**
 * Similar to `encryptWithKey` but generates random bytes to use as the key. This will be returned with the result.
 */
function encryptWithGeneratedKey(options, serializationVersion) {
    if (serializationVersion === void 0) { serializationVersion = serialization_versions_1.SerializationFormat.latest_version; }
    return __awaiter(this, void 0, void 0, function () {
        var key, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = util_1.generateRandomKey(options.keyLength || 32);
                    return [4 /*yield*/, encryptWithKey(__assign(__assign({}, options), { key: key }), serializationVersion)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, __assign(__assign({}, result), { generatedKey: key })];
            }
        });
    });
}
exports.encryptWithGeneratedKey = encryptWithGeneratedKey;
/**
 * Similar to `encryptWithKey` but allows passing an arbitrary string/passphrase which will
 * be used to derive a key that will be used in encryption. The derived key will be returned with the results.
 */
function encryptWithKeyDerivedFromString(options, serializationVersion) {
    if (serializationVersion === void 0) { serializationVersion = serialization_versions_1.SerializationFormat.latest_version; }
    return __awaiter(this, void 0, void 0, function () {
        var derived, result, serializedKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pbkdf2_hmac_1.generateDerivedKey({ key: options.key })];
                case 1:
                    derived = _a.sent();
                    return [4 /*yield*/, encryptWithKey(__assign(__assign({}, options), { key: derived.key }), serializationVersion)];
                case 2:
                    result = _a.sent();
                    serializedKey = derived.options.serialize(serializationVersion);
                    result.serialized = result.serialized + "." + serializedKey;
                    return [2 /*return*/, __assign(__assign({}, result), derived)];
            }
        });
    });
}
exports.encryptWithKeyDerivedFromString = encryptWithKeyDerivedFromString;
/**
 * Encrypt data with the provided key.
 *
 * This is technically synchronous at the moment but it returns a promise in the event that we want to make
 * it asynchronous using Web Workers or similar in future.
 *
 * @param options.key The exact key to use - key.length must be valid for specified encryption
 * strategy (typically 32 bytes).
 * To encrypt with a derived key, use `encryptWithKeyDerivedFromString` or, to, use a random
 * key `encryptWithGeneratedKey`.
 */
function encryptWithKey(_a, serializationVersion) {
    var key = _a.key, data = _a.data, strategy = _a.strategy, iv = _a.iv;
    if (serializationVersion === void 0) { serializationVersion = serialization_versions_1.SerializationFormat.latest_version; }
    return __awaiter(this, void 0, void 0, function () {
        var output, encrypted, artifacts, keyLengthBits, _b, cipher, mode, serialized;
        return __generator(this, function (_c) {
            output = _encryptWithKey(key, data, strategy, iv);
            encrypted = output.encrypted, artifacts = output.artifacts;
            keyLengthBits = key.length * 8;
            _b = strategy.split('-').map(upperWords), cipher = _b[0], mode = _b[1];
            serialized = util_1.serialize("" + cipher + keyLengthBits + mode, encrypted, artifacts, serializationVersion);
            return [2 /*return*/, {
                    encrypted: encrypted,
                    serialized: serialized,
                }];
        });
    });
}
exports.encryptWithKey = encryptWithKey;
/**
 * UpperCamelCase helper
 */
var upperWords = function (val) { return val.slice(0, 1).toUpperCase() + val.slice(1).toLowerCase(); };
function _encryptWithKey(key, data, strategy, iv) {
    var cipher = node_forge_1.cipher.createCipher(strategy, node_forge_1.util.createBuffer(key));
    iv = iv || node_forge_1.random.getBytesSync(12);
    cipher.start({ iv: node_forge_1.util.createBuffer(iv), additionalData: 'none', tagLength: 128 });
    cipher.update(node_forge_1.util.createBuffer(data));
    cipher.finish();
    var artifacts = {
        iv: util_1.stringAsBinaryBuffer(iv),
    };
    if (cipher.mode.tag) {
        artifacts.at = util_1.stringAsBinaryBuffer(cipher.mode.tag.data);
    }
    artifacts.ad = 'none';
    return {
        encrypted: cipher.output.data,
        artifacts: artifacts,
    };
}
