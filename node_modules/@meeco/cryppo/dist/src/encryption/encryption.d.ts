import { IRandomKeyOptions } from '../key-derivation/derived-key';
import { SerializationFormat } from '../serialization-versions';
import { CipherStrategy } from '../strategies';
export interface IEncryptionOptionsWithoutKey {
    /***
     * Data to encrypt
     */
    data: string;
    /**
     * Encryption/Cipher strategy to use
     */
    strategy: CipherStrategy;
    /**
     * Defaults to 32 - length to use for generated key
     */
    keyLength?: number;
    /**
     * @deprecated Primarily for testing purposes.
     */
    iv?: string;
}
export interface IEncryptionArtifacts {
    iv: any;
    at: any;
    ad: any;
}
export declare type IEncryptionOptions = IEncryptionOptionsWithoutKey & {
    key: string;
};
export interface IEncryptionResult {
    serialized: string;
    encrypted: string;
}
/**
 * Similar to `encryptWithKey` but generates random bytes to use as the key. This will be returned with the result.
 */
export declare function encryptWithGeneratedKey(options: IEncryptionOptionsWithoutKey, serializationVersion?: SerializationFormat): Promise<IEncryptionResult & {
    generatedKey: string;
}>;
/**
 * Similar to `encryptWithKey` but allows passing an arbitrary string/passphrase which will
 * be used to derive a key that will be used in encryption. The derived key will be returned with the results.
 */
export declare function encryptWithKeyDerivedFromString(options: IEncryptionOptions, serializationVersion?: SerializationFormat): Promise<IEncryptionResult & IRandomKeyOptions & {
    key: string;
}>;
/**
 * Encrypt data with the provided key.
 *
 * This is technically synchronous at the moment but it returns a promise in the event that we want to make
 * it asynchronous using Web Workers or similar in future.
 *
 * @param options.key The exact key to use - key.length must be valid for specified encryption
 * strategy (typically 32 bytes).
 * To encrypt with a derived key, use `encryptWithKeyDerivedFromString` or, to, use a random
 * key `encryptWithGeneratedKey`.
 */
export declare function encryptWithKey({ key, data, strategy, iv }: IEncryptionOptions, serializationVersion?: SerializationFormat): Promise<IEncryptionResult>;
