"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptWithPrivateKey = exports.decryptSerializedWithPrivateKey = exports.encryptWithPublicKey = exports.encryptPrivateKeyWithPassword = exports.generateRSAKeyPair = void 0;
var node_forge_1 = require("node-forge");
var serialization_versions_1 = require("../serialization-versions");
var util_1 = require("../util");
function generateRSAKeyPair(bits) {
    if (bits === void 0) { bits = 4096; }
    return new Promise(function (resolve, reject) {
        // -1 workers to estimate number of cores available
        // https://github.com/digitalbazaar/forge#rsa
        node_forge_1.pki.rsa.generateKeyPair({ bits: bits, workers: 0 }, function (err, keyPair) {
            if (err) {
                return reject(err);
            }
            resolve({
                privateKey: node_forge_1.pki.privateKeyToPem(keyPair.privateKey),
                publicKey: node_forge_1.pki.publicKeyToPem(keyPair.publicKey),
                bits: bits,
            });
        });
    });
}
exports.generateRSAKeyPair = generateRSAKeyPair;
function encryptPrivateKeyWithPassword(_a) {
    var privateKeyPem = _a.privateKeyPem, password = _a.password;
    var publicKey = node_forge_1.pki.privateKeyFromPem(privateKeyPem);
    return node_forge_1.pki.encryptRsaPrivateKey(publicKey, password);
}
exports.encryptPrivateKeyWithPassword = encryptPrivateKeyWithPassword;
function encryptWithPublicKey(_a, serializationFormat) {
    var publicKeyPem = _a.publicKeyPem, data = _a.data, _b = _a.scheme, scheme = _b === void 0 ? 'RSA-OAEP' : _b;
    if (serializationFormat === void 0) { serializationFormat = serialization_versions_1.SerializationFormat.latest_version; }
    return __awaiter(this, void 0, void 0, function () {
        var pk, encrypted, bitLength, serialized;
        return __generator(this, function (_c) {
            pk = node_forge_1.pki.publicKeyFromPem(publicKeyPem);
            encrypted = pk.encrypt(data, scheme);
            bitLength = util_1.keyLengthFromPublicKeyPem(publicKeyPem);
            serialized = util_1.serialize("Rsa" + bitLength, encrypted, {}, serializationFormat);
            return [2 /*return*/, {
                    encrypted: encrypted,
                    serialized: serialized,
                }];
        });
    });
}
exports.encryptWithPublicKey = encryptWithPublicKey;
function decryptSerializedWithPrivateKey(_a) {
    var password = _a.password, privateKeyPem = _a.privateKeyPem, serialized = _a.serialized, _b = _a.scheme, scheme = _b === void 0 ? 'RSA-OAEP' : _b;
    return __awaiter(this, void 0, void 0, function () {
        var encrypted;
        return __generator(this, function (_c) {
            encrypted = util_1.deSerialize(serialized).decodedPairs[0];
            return [2 /*return*/, decryptWithPrivateKey({
                    password: password,
                    privateKeyPem: privateKeyPem,
                    encrypted: encrypted,
                    scheme: scheme,
                })];
        });
    });
}
exports.decryptSerializedWithPrivateKey = decryptSerializedWithPrivateKey;
/**
 * @deprecated
 */
function decryptWithPrivateKey(_a) {
    var password = _a.password, privateKeyPem = _a.privateKeyPem, encrypted = _a.encrypted, _b = _a.scheme, scheme = _b === void 0 ? 'RSA-OAEP' : _b;
    return __awaiter(this, void 0, void 0, function () {
        var pk;
        return __generator(this, function (_c) {
            pk = node_forge_1.pki.decryptRsaPrivateKey(privateKeyPem, password);
            return [2 /*return*/, pk.decrypt(encrypted, scheme)];
        });
    });
}
exports.decryptWithPrivateKey = decryptWithPrivateKey;
