/**
 * Keystore
 * Storage for secrets and keys. When a user creates and encrypts Data Encryption Keys and Keypairs, they are stored in the Keystore. A user cannot access the Vault without first using the Keystore. In the current implementation the Keystore functionality is implemented by meeco-keystore.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AdmissionToken
 */
export interface AdmissionToken {
    /**
     *
     * @type {string}
     * @memberof AdmissionToken
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AdmissionToken
     */
    token_value: string;
    /**
     *
     * @type {boolean}
     * @memberof AdmissionToken
     */
    used: boolean;
}
/**
 *
 * @export
 * @interface AdmissionTokenResponse
 */
export interface AdmissionTokenResponse {
    /**
     *
     * @type {AdmissionToken}
     * @memberof AdmissionTokenResponse
     */
    admission_token: AdmissionToken;
}
/**
 *
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * API version
     * @type {string}
     * @memberof Component
     */
    api_version: string;
    /**
     * Name of the component/microservice
     * @type {string}
     * @memberof Component
     */
    name: string;
}
/**
 *
 * @export
 * @interface DataEncryptionKey
 */
export interface DataEncryptionKey {
    /**
     *
     * @type {string}
     * @memberof DataEncryptionKey
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DataEncryptionKey
     */
    serialized_data_encryption_key: string;
}
/**
 *
 * @export
 * @interface DataEncryptionKeyResponse
 */
export interface DataEncryptionKeyResponse {
    /**
     *
     * @type {DataEncryptionKey}
     * @memberof DataEncryptionKeyResponse
     */
    data_encryption_key: DataEncryptionKey;
}
/**
 *
 * @export
 * @interface DeletionQueueItemResponse
 */
export interface DeletionQueueItemResponse {
    /**
     *
     * @type {UserQueuedForDeletion}
     * @memberof DeletionQueueItemResponse
     */
    deletion_queue_item: UserQueuedForDeletion;
}
/**
 *
 * @export
 * @interface EncryptionSpaceDataEncryptionKey
 */
export interface EncryptionSpaceDataEncryptionKey {
    /**
     *
     * @type {string}
     * @memberof EncryptionSpaceDataEncryptionKey
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof EncryptionSpaceDataEncryptionKey
     */
    encryption_space_id: string;
    /**
     *
     * @type {string}
     * @memberof EncryptionSpaceDataEncryptionKey
     */
    serialized_data_encryption_key: string;
}
/**
 *
 * @export
 * @interface EncryptionSpaceDataEncryptionKeyResponse
 */
export interface EncryptionSpaceDataEncryptionKeyResponse {
    /**
     *
     * @type {EncryptionSpaceDataEncryptionKey}
     * @memberof EncryptionSpaceDataEncryptionKeyResponse
     */
    encryption_space_data_encryption_key: EncryptionSpaceDataEncryptionKey;
}
/**
 *
 * @export
 * @interface ExternalAdmissionTokenResponse
 */
export interface ExternalAdmissionTokenResponse {
    /**
     *
     * @type {ExternalAdmissionTokens}
     * @memberof ExternalAdmissionTokenResponse
     */
    external_admission_token: ExternalAdmissionTokens;
}
/**
 *
 * @export
 * @interface ExternalAdmissionTokens
 */
export interface ExternalAdmissionTokens {
    /**
     *
     * @type {string}
     * @memberof ExternalAdmissionTokens
     */
    vault_api_admission_token: string;
    /**
     *
     * @type {string}
     * @memberof ExternalAdmissionTokens
     */
    passphrase_store_admission_token: string;
}
/**
 *
 * @export
 * @interface KeyEncryptionKey
 */
export interface KeyEncryptionKey {
    /**
     *
     * @type {string}
     * @memberof KeyEncryptionKey
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof KeyEncryptionKey
     */
    serialized_key_encryption_key: string;
}
/**
 *
 * @export
 * @interface KeyEncryptionKeyResponse
 */
export interface KeyEncryptionKeyResponse {
    /**
     *
     * @type {KeyEncryptionKey}
     * @memberof KeyEncryptionKeyResponse
     */
    key_encryption_key: KeyEncryptionKey;
}
/**
 *
 * @export
 * @interface Keypair
 */
export interface Keypair {
    /**
     *
     * @type {string}
     * @memberof Keypair
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Keypair
     */
    public_key: string;
    /**
     *
     * @type {string}
     * @memberof Keypair
     */
    encrypted_serialized_key: string;
    /**
     *
     * @type {any}
     * @memberof Keypair
     */
    metadata: any;
    /**
     *
     * @type {Array<any>}
     * @memberof Keypair
     */
    external_identifiers: Array<any>;
}
/**
 *
 * @export
 * @interface KeypairResponse
 */
export interface KeypairResponse {
    /**
     *
     * @type {Keypair}
     * @memberof KeypairResponse
     */
    keypair: Keypair;
}
/**
 *
 * @export
 * @interface PassphraseDerivationArtefact
 */
export interface PassphraseDerivationArtefact {
    /**
     *
     * @type {string}
     * @memberof PassphraseDerivationArtefact
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof PassphraseDerivationArtefact
     */
    derivation_artefacts: string;
    /**
     *
     * @type {string}
     * @memberof PassphraseDerivationArtefact
     */
    verification_artefacts: string;
}
/**
 *
 * @export
 * @interface PassphraseDerivationArtefactResponse
 */
export interface PassphraseDerivationArtefactResponse {
    /**
     *
     * @type {PassphraseDerivationArtefact}
     * @memberof PassphraseDerivationArtefactResponse
     */
    passphrase_derivation_artefact: PassphraseDerivationArtefact;
}
/**
 *
 * @export
 * @interface PostAdminUsersRequest
 */
export interface PostAdminUsersRequest {
    /**
     *
     * @type {string}
     * @memberof PostAdminUsersRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostAdminUsersRequest
     */
    provider_api_key: string;
}
/**
 *
 * @export
 * @interface PostDataEncryptionKeysRequest
 */
export interface PostDataEncryptionKeysRequest {
    /**
     *
     * @type {string}
     * @memberof PostDataEncryptionKeysRequest
     */
    serialized_data_encryption_key: string;
}
/**
 *
 * @export
 * @interface PostEncryptionSpacesRequest
 */
export interface PostEncryptionSpacesRequest {
    /**
     *
     * @type {string}
     * @memberof PostEncryptionSpacesRequest
     */
    encrypted_serialized_key: string;
}
/**
 *
 * @export
 * @interface PostImportUserRequest
 */
export interface PostImportUserRequest {
    /**
     *
     * @type {string}
     * @memberof PostImportUserRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostImportUserRequest
     */
    passphrase: string;
    /**
     *
     * @type {string}
     * @memberof PostImportUserRequest
     */
    serialised_keys: string;
}
/**
 *
 * @export
 * @interface PostKeyEncryptionKeyRequest
 */
export interface PostKeyEncryptionKeyRequest {
    /**
     *
     * @type {string}
     * @memberof PostKeyEncryptionKeyRequest
     */
    serialized_key_encryption_key: string;
}
/**
 *
 * @export
 * @interface PostKeypairsRequest
 */
export interface PostKeypairsRequest {
    /**
     * Serialized encrypted key
     * @type {string}
     * @memberof PostKeypairsRequest
     */
    encrypted_serialized_key?: string;
    /**
     *
     * @type {string}
     * @memberof PostKeypairsRequest
     */
    public_key?: string;
    /**
     *
     * @type {any}
     * @memberof PostKeypairsRequest
     */
    metadata?: any;
    /**
     *
     * @type {Array<string>}
     * @memberof PostKeypairsRequest
     */
    external_identifiers?: Array<string>;
}
/**
 * both the derivation_artefacts and verification_artefacts are expected to be a urlsafe Base64 encrypted json string
 * @export
 * @interface PostPassphraseDerivationArtefactRequest
 */
export interface PostPassphraseDerivationArtefactRequest {
    /**
     *
     * @type {string}
     * @memberof PostPassphraseDerivationArtefactRequest
     */
    derivation_artefacts: string;
    /**
     *
     * @type {string}
     * @memberof PostPassphraseDerivationArtefactRequest
     */
    verification_artefacts: string;
}
/**
 *
 * @export
 * @interface PostResellerUserCreateRequest
 */
export interface PostResellerUserCreateRequest {
    /**
     *
     * @type {string}
     * @memberof PostResellerUserCreateRequest
     */
    userExtId: string;
}
/**
 *
 * @export
 * @interface PostSessionRequest
 */
export interface PostSessionRequest {
    /**
     *
     * @type {string}
     * @memberof PostSessionRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostSessionRequest
     */
    passphrase: string;
}
/**
 *
 * @export
 * @interface PostSessionWithLoginKeyRequest
 */
export interface PostSessionWithLoginKeyRequest {
    /**
     *
     * @type {string}
     * @memberof PostSessionWithLoginKeyRequest
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof PostSessionWithLoginKeyRequest
     */
    login_key: string;
}
/**
 *
 * @export
 * @interface PostSharedKeysClaimKeyRequest
 */
export interface PostSharedKeysClaimKeyRequest {
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysClaimKeyRequest
     */
    public_key: string;
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysClaimKeyRequest
     */
    request_signature: string;
}
/**
 *
 * @export
 * @interface PostSharedKeysRequest
 */
export interface PostSharedKeysRequest {
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysRequest
     */
    encrypted_key: string;
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysRequest
     */
    external_id: string;
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysRequest
     */
    public_key: string;
    /**
     *
     * @type {PostSharedKeysRequestKeyMetadata}
     * @memberof PostSharedKeysRequest
     */
    key_metadata: PostSharedKeysRequestKeyMetadata;
}
/**
 *
 * @export
 * @interface PostSharedKeysRequestKeyMetadata
 */
export interface PostSharedKeysRequestKeyMetadata {
    /**
     *
     * @type {string}
     * @memberof PostSharedKeysRequestKeyMetadata
     */
    key_type?: string;
}
/**
 *
 * @export
 * @interface PostSrpChallengesRequest
 */
export interface PostSrpChallengesRequest {
    /**
     *
     * @type {string}
     * @memberof PostSrpChallengesRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostSrpChallengesRequest
     */
    srp_a: string;
}
/**
 *
 * @export
 * @interface PostSrpSessionRequest
 */
export interface PostSrpSessionRequest {
    /**
     *
     * @type {string}
     * @memberof PostSrpSessionRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostSrpSessionRequest
     */
    srp_a: string;
    /**
     *
     * @type {string}
     * @memberof PostSrpSessionRequest
     */
    srp_m: string;
}
/**
 *
 * @export
 * @interface PostSrpUsernameRequest
 */
export interface PostSrpUsernameRequest {
    /**
     *
     * @type {string}
     * @memberof PostSrpUsernameRequest
     */
    captcha_token?: string;
}
/**
 *
 * @export
 * @interface PostSrpUsersRequest
 */
export interface PostSrpUsersRequest {
    /**
     *
     * @type {string}
     * @memberof PostSrpUsersRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostSrpUsersRequest
     */
    srp_salt: string;
    /**
     *
     * @type {string}
     * @memberof PostSrpUsersRequest
     */
    srp_verifier: string;
}
/**
 *
 * @export
 * @interface PostUsersRequest
 */
export interface PostUsersRequest {
    /**
     *
     * @type {string}
     * @memberof PostUsersRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof PostUsersRequest
     */
    passphrase: string;
    /**
     *
     * @type {string}
     * @memberof PostUsersRequest
     */
    admission_token?: string;
}
/**
 *
 * @export
 * @interface PutKeypairsRequest
 */
export interface PutKeypairsRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof PutKeypairsRequest
     */
    external_identifiers?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PutKeypairsRequest
     */
    public_key?: string;
    /**
     *
     * @type {any}
     * @memberof PutKeypairsRequest
     */
    metadata?: any;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
    /**
     *
     * @type {string}
     * @memberof Session
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    session_authentication_string: string;
    /**
     *
     * @type {Date}
     * @memberof Session
     */
    valid_from: Date;
    /**
     *
     * @type {Date}
     * @memberof Session
     */
    valid_till: Date;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    username: string;
}
/**
 *
 * @export
 * @interface SessionResponse
 */
export interface SessionResponse {
    /**
     *
     * @type {Session}
     * @memberof SessionResponse
     */
    session: Session;
}
/**
 *
 * @export
 * @interface SharedKey
 */
export interface SharedKey {
    /**
     *
     * @type {string}
     * @memberof SharedKey
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof SharedKey
     */
    serialized_shared_key: string;
}
/**
 *
 * @export
 * @interface SharedKeyClaimed
 */
export interface SharedKeyClaimed {
    /**
     *
     * @type {string}
     * @memberof SharedKeyClaimed
     */
    external_id: string;
    /**
     *
     * @type {string}
     * @memberof SharedKeyClaimed
     */
    serialized_shared_key: string;
}
/**
 *
 * @export
 * @interface SharedKeyClaimedResponse
 */
export interface SharedKeyClaimedResponse {
    /**
     *
     * @type {SharedKeyClaimed}
     * @memberof SharedKeyClaimedResponse
     */
    shared_key_claimed: SharedKeyClaimed;
}
/**
 *
 * @export
 * @interface SharedKeyResponse
 */
export interface SharedKeyResponse {
    /**
     *
     * @type {SharedKey}
     * @memberof SharedKeyResponse
     */
    shared_key: SharedKey;
}
/**
 *
 * @export
 * @interface SrpChallenge
 */
export interface SrpChallenge {
    /**
     *
     * @type {string}
     * @memberof SrpChallenge
     */
    challenge_salt: string;
    /**
     *
     * @type {string}
     * @memberof SrpChallenge
     */
    challenge_b: string;
}
/**
 *
 * @export
 * @interface SrpChallengesResponse
 */
export interface SrpChallengesResponse {
    /**
     *
     * @type {SrpChallenge}
     * @memberof SrpChallengesResponse
     */
    challenge: SrpChallenge;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    username: string;
}
/**
 *
 * @export
 * @interface UserImported
 */
export interface UserImported {
    /**
     *
     * @type {string}
     * @memberof UserImported
     */
    user_id: string;
    /**
     *
     * @type {any}
     * @memberof UserImported
     */
    key_pairs: any;
    /**
     *
     * @type {any}
     * @memberof UserImported
     */
    data_encryption_keys: any;
}
/**
 *
 * @export
 * @interface UserImportedResponse
 */
export interface UserImportedResponse {
    /**
     *
     * @type {UserImported}
     * @memberof UserImportedResponse
     */
    imported_user: UserImported;
}
/**
 *
 * @export
 * @interface UserQueuedForDeletion
 */
export interface UserQueuedForDeletion {
    /**
     *
     * @type {string}
     * @memberof UserQueuedForDeletion
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof UserQueuedForDeletion
     */
    queued_for_deletion_after: string;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     *
     * @type {User}
     * @memberof UserResponse
     */
    user: User;
}
/**
 *
 * @export
 * @interface UsernameResponse
 */
export interface UsernameResponse {
    /**
     *
     * @type {string}
     * @memberof UsernameResponse
     */
    username: string;
    /**
     *
     * @type {Date}
     * @memberof UsernameResponse
     */
    expires_at: Date;
}
/**
 *
 * @export
 * @interface VersionResponse
 */
export interface VersionResponse {
    /**
     *
     * @type {Component}
     * @memberof VersionResponse
     */
    component: Component;
}
/**
 *
 * @export
 * @interface WellKnownRecaptchaResponse
 */
export interface WellKnownRecaptchaResponse {
    /**
     *
     * @type {string}
     * @memberof WellKnownRecaptchaResponse
     */
    site_key: string;
}
/**
 * AdmissionTokenApi - fetch parameter creator
 * @export
 */
export declare const AdmissionTokenApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates an AdmissionToken, used as authentication for user creation.
     * @summary Creates an admission token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensPost(options?: any): FetchArgs;
    /**
     * Retrieves an AdmissionToken, specified by its unique token value
     * @summary Returns an admission token
     * @param {string} token_value A token value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensTokenValueGet(token_value: string, options?: any): FetchArgs;
};
/**
 * AdmissionTokenApi - functional programming interface
 * @export
 */
export declare const AdmissionTokenApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates an AdmissionToken, used as authentication for user creation.
     * @summary Creates an admission token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensPost(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<AdmissionTokenResponse>;
    /**
     * Retrieves an AdmissionToken, specified by its unique token value
     * @summary Returns an admission token
     * @param {string} token_value A token value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensTokenValueGet(token_value: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<AdmissionTokenResponse>;
};
/**
 * AdmissionTokenApi - factory interface
 * @export
 */
export declare const AdmissionTokenApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Creates an AdmissionToken, used as authentication for user creation.
     * @summary Creates an admission token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensPost(options?: any): Promise<AdmissionTokenResponse>;
    /**
     * Retrieves an AdmissionToken, specified by its unique token value
     * @summary Returns an admission token
     * @param {string} token_value A token value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    admissionTokensTokenValueGet(token_value: string, options?: any): Promise<AdmissionTokenResponse>;
};
/**
 * AdmissionTokenApi - object-oriented interface
 * @export
 * @class AdmissionTokenApi
 * @extends {BaseAPI}
 */
export declare class AdmissionTokenApi extends BaseAPI {
    /**
     * Creates an AdmissionToken, used as authentication for user creation.
     * @summary Creates an admission token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdmissionTokenApi
     */
    admissionTokensPost(options?: any): Promise<AdmissionTokenResponse>;
    /**
     * Retrieves an AdmissionToken, specified by its unique token value
     * @summary Returns an admission token
     * @param {string} token_value A token value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdmissionTokenApi
     */
    admissionTokensTokenValueGet(token_value: string, options?: any): Promise<AdmissionTokenResponse>;
}
/**
 * DataEncryptionKeyApi - fetch parameter creator
 * @export
 */
export declare const DataEncryptionKeyApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Deletes a data encryption key identified by its ID.
     * @summary Deletes a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdDelete(id: string, options?: any): FetchArgs;
    /**
     * Retrieves a data encryption key by its ID.The data encryption key is encrypted with the key encryption key (KEK) of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdGet(id: string, options?: any): FetchArgs;
    /**
     * Stores a data encryption key encrypted with the key encryption key (KEK) of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a data encryption key
     * @param {PostDataEncryptionKeysRequest} [create_data_encryption_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysPost(create_data_encryption_params?: PostDataEncryptionKeysRequest | undefined, options?: any): FetchArgs;
};
/**
 * DataEncryptionKeyApi - functional programming interface
 * @export
 */
export declare const DataEncryptionKeyApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Deletes a data encryption key identified by its ID.
     * @summary Deletes a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdDelete(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Retrieves a data encryption key by its ID.The data encryption key is encrypted with the key encryption key (KEK) of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdGet(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DataEncryptionKeyResponse>;
    /**
     * Stores a data encryption key encrypted with the key encryption key (KEK) of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a data encryption key
     * @param {PostDataEncryptionKeysRequest} [create_data_encryption_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysPost(create_data_encryption_params?: PostDataEncryptionKeysRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DataEncryptionKeyResponse>;
};
/**
 * DataEncryptionKeyApi - factory interface
 * @export
 */
export declare const DataEncryptionKeyApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Deletes a data encryption key identified by its ID.
     * @summary Deletes a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdDelete(id: string, options?: any): Promise<Response>;
    /**
     * Retrieves a data encryption key by its ID.The data encryption key is encrypted with the key encryption key (KEK) of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysIdGet(id: string, options?: any): Promise<DataEncryptionKeyResponse>;
    /**
     * Stores a data encryption key encrypted with the key encryption key (KEK) of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a data encryption key
     * @param {PostDataEncryptionKeysRequest} [create_data_encryption_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataEncryptionKeysPost(create_data_encryption_params?: PostDataEncryptionKeysRequest | undefined, options?: any): Promise<DataEncryptionKeyResponse>;
};
/**
 * DataEncryptionKeyApi - object-oriented interface
 * @export
 * @class DataEncryptionKeyApi
 * @extends {BaseAPI}
 */
export declare class DataEncryptionKeyApi extends BaseAPI {
    /**
     * Deletes a data encryption key identified by its ID.
     * @summary Deletes a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEncryptionKeyApi
     */
    dataEncryptionKeysIdDelete(id: string, options?: any): Promise<Response>;
    /**
     * Retrieves a data encryption key by its ID.The data encryption key is encrypted with the key encryption key (KEK) of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a data encryption key
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEncryptionKeyApi
     */
    dataEncryptionKeysIdGet(id: string, options?: any): Promise<DataEncryptionKeyResponse>;
    /**
     * Stores a data encryption key encrypted with the key encryption key (KEK) of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a data encryption key
     * @param {PostDataEncryptionKeysRequest} [create_data_encryption_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataEncryptionKeyApi
     */
    dataEncryptionKeysPost(create_data_encryption_params?: PostDataEncryptionKeysRequest, options?: any): Promise<DataEncryptionKeyResponse>;
}
/**
 * EncryptionSpaceApi - fetch parameter creator
 * @export
 */
export declare const EncryptionSpaceApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Deletes an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdDelete(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieves an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdGet(id: string, options?: any): FetchArgs;
    /**
     *
     * @summary Creates an encryption space
     * @param {PostEncryptionSpacesRequest} [create_encryption_space_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesPost(create_encryption_space_params?: PostEncryptionSpacesRequest | undefined, options?: any): FetchArgs;
};
/**
 * EncryptionSpaceApi - functional programming interface
 * @export
 */
export declare const EncryptionSpaceApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Deletes an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdDelete(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     *
     * @summary Retrieves an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdGet(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<EncryptionSpaceDataEncryptionKeyResponse>;
    /**
     *
     * @summary Creates an encryption space
     * @param {PostEncryptionSpacesRequest} [create_encryption_space_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesPost(create_encryption_space_params?: PostEncryptionSpacesRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<EncryptionSpaceDataEncryptionKeyResponse>;
};
/**
 * EncryptionSpaceApi - factory interface
 * @export
 */
export declare const EncryptionSpaceApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary Deletes an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdDelete(id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Retrieves an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesIdGet(id: string, options?: any): Promise<EncryptionSpaceDataEncryptionKeyResponse>;
    /**
     *
     * @summary Creates an encryption space
     * @param {PostEncryptionSpacesRequest} [create_encryption_space_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encryptionSpacesPost(create_encryption_space_params?: PostEncryptionSpacesRequest | undefined, options?: any): Promise<EncryptionSpaceDataEncryptionKeyResponse>;
};
/**
 * EncryptionSpaceApi - object-oriented interface
 * @export
 * @class EncryptionSpaceApi
 * @extends {BaseAPI}
 */
export declare class EncryptionSpaceApi extends BaseAPI {
    /**
     *
     * @summary Deletes an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncryptionSpaceApi
     */
    encryptionSpacesIdDelete(id: string, options?: any): Promise<Response>;
    /**
     *
     * @summary Retrieves an encryption space
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncryptionSpaceApi
     */
    encryptionSpacesIdGet(id: string, options?: any): Promise<EncryptionSpaceDataEncryptionKeyResponse>;
    /**
     *
     * @summary Creates an encryption space
     * @param {PostEncryptionSpacesRequest} [create_encryption_space_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncryptionSpaceApi
     */
    encryptionSpacesPost(create_encryption_space_params?: PostEncryptionSpacesRequest, options?: any): Promise<EncryptionSpaceDataEncryptionKeyResponse>;
}
/**
 * ExternalAdmissionTokensApi - fetch parameter creator
 * @export
 */
export declare const ExternalAdmissionTokensApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Retrieves admission tokens for the Vault and the Passphrase store. Admission tokens in Vault and the Passphrase store are required to create user accounts. Admission tokens can be created by the Keystore only on behalf of the user. Configuration variables that control interaction with mentioned services: `vault_present` and `passphrase_store_present`.
     * @summary Retrieve admission tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalAdmissionTokensGet(options?: any): FetchArgs;
};
/**
 * ExternalAdmissionTokensApi - functional programming interface
 * @export
 */
export declare const ExternalAdmissionTokensApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Retrieves admission tokens for the Vault and the Passphrase store. Admission tokens in Vault and the Passphrase store are required to create user accounts. Admission tokens can be created by the Keystore only on behalf of the user. Configuration variables that control interaction with mentioned services: `vault_present` and `passphrase_store_present`.
     * @summary Retrieve admission tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalAdmissionTokensGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ExternalAdmissionTokenResponse>;
};
/**
 * ExternalAdmissionTokensApi - factory interface
 * @export
 */
export declare const ExternalAdmissionTokensApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Retrieves admission tokens for the Vault and the Passphrase store. Admission tokens in Vault and the Passphrase store are required to create user accounts. Admission tokens can be created by the Keystore only on behalf of the user. Configuration variables that control interaction with mentioned services: `vault_present` and `passphrase_store_present`.
     * @summary Retrieve admission tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    externalAdmissionTokensGet(options?: any): Promise<ExternalAdmissionTokenResponse>;
};
/**
 * ExternalAdmissionTokensApi - object-oriented interface
 * @export
 * @class ExternalAdmissionTokensApi
 * @extends {BaseAPI}
 */
export declare class ExternalAdmissionTokensApi extends BaseAPI {
    /**
     * Retrieves admission tokens for the Vault and the Passphrase store. Admission tokens in Vault and the Passphrase store are required to create user accounts. Admission tokens can be created by the Keystore only on behalf of the user. Configuration variables that control interaction with mentioned services: `vault_present` and `passphrase_store_present`.
     * @summary Retrieve admission tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalAdmissionTokensApi
     */
    externalAdmissionTokensGet(options?: any): Promise<ExternalAdmissionTokenResponse>;
}
/**
 * HomeApi - fetch parameter creator
 * @export
 */
export declare const HomeApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form  that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {string} [redirect_url]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaCallbackFormGet(redirect_url?: string | undefined, options?: any): FetchArgs;
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaFormGet(options?: any): FetchArgs;
};
/**
 * HomeApi - functional programming interface
 * @export
 */
export declare const HomeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form  that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {string} [redirect_url]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaCallbackFormGet(redirect_url?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaFormGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
};
/**
 * HomeApi - factory interface
 * @export
 */
export declare const HomeApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form  that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {string} [redirect_url]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaCallbackFormGet(redirect_url?: string | undefined, options?: any): Promise<Response>;
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    homeCaptchaFormGet(options?: any): Promise<Response>;
};
/**
 * HomeApi - object-oriented interface
 * @export
 * @class HomeApi
 * @extends {BaseAPI}
 */
export declare class HomeApi extends BaseAPI {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form  that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {string} [redirect_url]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    homeCaptchaCallbackFormGet(redirect_url?: string, options?: any): Promise<Response>;
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha form that can be used for getting a captcha_token for later use in the srp/username endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeApi
     */
    homeCaptchaFormGet(options?: any): Promise<Response>;
}
/**
 * ImportUserApi - fetch parameter creator
 * @export
 */
export declare const ImportUserApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new user key store user and imports the keys
     * @param {PostImportUserRequest} [import_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importUserPost(import_user_params?: PostImportUserRequest | undefined, options?: any): FetchArgs;
};
/**
 * ImportUserApi - functional programming interface
 * @export
 */
export declare const ImportUserApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new user key store user and imports the keys
     * @param {PostImportUserRequest} [import_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importUserPost(import_user_params?: PostImportUserRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserImportedResponse>;
};
/**
 * ImportUserApi - factory interface
 * @export
 */
export declare const ImportUserApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary Creates a new user key store user and imports the keys
     * @param {PostImportUserRequest} [import_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importUserPost(import_user_params?: PostImportUserRequest | undefined, options?: any): Promise<UserImportedResponse>;
};
/**
 * ImportUserApi - object-oriented interface
 * @export
 * @class ImportUserApi
 * @extends {BaseAPI}
 */
export declare class ImportUserApi extends BaseAPI {
    /**
     *
     * @summary Creates a new user key store user and imports the keys
     * @param {PostImportUserRequest} [import_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportUserApi
     */
    importUserPost(import_user_params?: PostImportUserRequest, options?: any): Promise<UserImportedResponse>;
}
/**
 * KeyEncryptionKeyApi - fetch parameter creator
 * @export
 */
export declare const KeyEncryptionKeyApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns a key encryption key (KEK) encrypted with the passphrase derived key of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a key encryption key  (KEK)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyGet(options?: any): FetchArgs;
    /**
     * Stores a key encryption key (KEK) encrypted with the passphrase derived key of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a key encryption key (KEK)
     * @param {PostKeyEncryptionKeyRequest} [create_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyPost(create_key_params?: PostKeyEncryptionKeyRequest | undefined, options?: any): FetchArgs;
};
/**
 * KeyEncryptionKeyApi - functional programming interface
 * @export
 */
export declare const KeyEncryptionKeyApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns a key encryption key (KEK) encrypted with the passphrase derived key of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a key encryption key  (KEK)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeyEncryptionKeyResponse>;
    /**
     * Stores a key encryption key (KEK) encrypted with the passphrase derived key of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a key encryption key (KEK)
     * @param {PostKeyEncryptionKeyRequest} [create_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyPost(create_key_params?: PostKeyEncryptionKeyRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeyEncryptionKeyResponse>;
};
/**
 * KeyEncryptionKeyApi - factory interface
 * @export
 */
export declare const KeyEncryptionKeyApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Returns a key encryption key (KEK) encrypted with the passphrase derived key of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a key encryption key  (KEK)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyGet(options?: any): Promise<KeyEncryptionKeyResponse>;
    /**
     * Stores a key encryption key (KEK) encrypted with the passphrase derived key of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a key encryption key (KEK)
     * @param {PostKeyEncryptionKeyRequest} [create_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyEncryptionKeyPost(create_key_params?: PostKeyEncryptionKeyRequest | undefined, options?: any): Promise<KeyEncryptionKeyResponse>;
};
/**
 * KeyEncryptionKeyApi - object-oriented interface
 * @export
 * @class KeyEncryptionKeyApi
 * @extends {BaseAPI}
 */
export declare class KeyEncryptionKeyApi extends BaseAPI {
    /**
     * Returns a key encryption key (KEK) encrypted with the passphrase derived key of the user. The format is the serialization format of the Cryppo library.
     * @summary Retrieves a key encryption key  (KEK)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyEncryptionKeyApi
     */
    keyEncryptionKeyGet(options?: any): Promise<KeyEncryptionKeyResponse>;
    /**
     * Stores a key encryption key (KEK) encrypted with the passphrase derived key of the user. The expected format is the serialization format of the Cryppo library.
     * @summary Stores a key encryption key (KEK)
     * @param {PostKeyEncryptionKeyRequest} [create_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyEncryptionKeyApi
     */
    keyEncryptionKeyPost(create_key_params?: PostKeyEncryptionKeyRequest, options?: any): Promise<KeyEncryptionKeyResponse>;
}
/**
 * KeypairApi - fetch parameter creator
 * @export
 */
export declare const KeypairApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Retrieves a KeyPair specified by `external_id` (eg the `id` for a Connection, if the KeyPair was created for that purpose).
     * @summary Retrieves a keypair by external id
     * @param {string} external_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsExternalIdExternalIdGet(external_id: string, options?: any): FetchArgs;
    /**
     * Deletes a keypair identified by its ID.
     * @summary Deletes a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdDelete(id: string, options?: any): FetchArgs;
    /**
     * Retrieves a keypair identified by its ID. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. The public key is also served unencrypted as a PEM
     * @summary Retrieves a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdGet(id: string, options?: any): FetchArgs;
    /**
     * Updates fields for KeyPair specified by id with new values if provided in params.
     * @summary Updates a keypair
     * @param {string} id
     * @param {PutKeypairsRequest} [update_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdPatch(id: string, update_keypair_params?: PutKeypairsRequest | undefined, options?: any): FetchArgs;
    /**
     * Stores a keypair. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. Also stores the public key unencrypted as a PEM. Each keypair can be tagged by a list of tags which make is possible for the client to differentiate between various keypairs.
     * @summary Stores a keypair
     * @param {PostKeypairsRequest} [create_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsPost(create_keypair_params?: PostKeypairsRequest | undefined, options?: any): FetchArgs;
};
/**
 * KeypairApi - functional programming interface
 * @export
 */
export declare const KeypairApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Retrieves a KeyPair specified by `external_id` (eg the `id` for a Connection, if the KeyPair was created for that purpose).
     * @summary Retrieves a keypair by external id
     * @param {string} external_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsExternalIdExternalIdGet(external_id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeypairResponse>;
    /**
     * Deletes a keypair identified by its ID.
     * @summary Deletes a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdDelete(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Retrieves a keypair identified by its ID. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. The public key is also served unencrypted as a PEM
     * @summary Retrieves a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdGet(id: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeypairResponse>;
    /**
     * Updates fields for KeyPair specified by id with new values if provided in params.
     * @summary Updates a keypair
     * @param {string} id
     * @param {PutKeypairsRequest} [update_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdPatch(id: string, update_keypair_params?: PutKeypairsRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeypairResponse>;
    /**
     * Stores a keypair. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. Also stores the public key unencrypted as a PEM. Each keypair can be tagged by a list of tags which make is possible for the client to differentiate between various keypairs.
     * @summary Stores a keypair
     * @param {PostKeypairsRequest} [create_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsPost(create_keypair_params?: PostKeypairsRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<KeypairResponse>;
};
/**
 * KeypairApi - factory interface
 * @export
 */
export declare const KeypairApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Retrieves a KeyPair specified by `external_id` (eg the `id` for a Connection, if the KeyPair was created for that purpose).
     * @summary Retrieves a keypair by external id
     * @param {string} external_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsExternalIdExternalIdGet(external_id: string, options?: any): Promise<KeypairResponse>;
    /**
     * Deletes a keypair identified by its ID.
     * @summary Deletes a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdDelete(id: string, options?: any): Promise<Response>;
    /**
     * Retrieves a keypair identified by its ID. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. The public key is also served unencrypted as a PEM
     * @summary Retrieves a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdGet(id: string, options?: any): Promise<KeypairResponse>;
    /**
     * Updates fields for KeyPair specified by id with new values if provided in params.
     * @summary Updates a keypair
     * @param {string} id
     * @param {PutKeypairsRequest} [update_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsIdPatch(id: string, update_keypair_params?: PutKeypairsRequest | undefined, options?: any): Promise<KeypairResponse>;
    /**
     * Stores a keypair. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. Also stores the public key unencrypted as a PEM. Each keypair can be tagged by a list of tags which make is possible for the client to differentiate between various keypairs.
     * @summary Stores a keypair
     * @param {PostKeypairsRequest} [create_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keypairsPost(create_keypair_params?: PostKeypairsRequest | undefined, options?: any): Promise<KeypairResponse>;
};
/**
 * KeypairApi - object-oriented interface
 * @export
 * @class KeypairApi
 * @extends {BaseAPI}
 */
export declare class KeypairApi extends BaseAPI {
    /**
     * Retrieves a KeyPair specified by `external_id` (eg the `id` for a Connection, if the KeyPair was created for that purpose).
     * @summary Retrieves a keypair by external id
     * @param {string} external_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    keypairsExternalIdExternalIdGet(external_id: string, options?: any): Promise<KeypairResponse>;
    /**
     * Deletes a keypair identified by its ID.
     * @summary Deletes a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    keypairsIdDelete(id: string, options?: any): Promise<Response>;
    /**
     * Retrieves a keypair identified by its ID. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. The public key is also served unencrypted as a PEM
     * @summary Retrieves a keypair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    keypairsIdGet(id: string, options?: any): Promise<KeypairResponse>;
    /**
     * Updates fields for KeyPair specified by id with new values if provided in params.
     * @summary Updates a keypair
     * @param {string} id
     * @param {PutKeypairsRequest} [update_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    keypairsIdPatch(id: string, update_keypair_params?: PutKeypairsRequest, options?: any): Promise<KeypairResponse>;
    /**
     * Stores a keypair. The keypair encrypted with the key encryption key (KEK) of the user (field `encrypted_serialized_key`). The format is the serialization format of the Cryppo library. Also stores the public key unencrypted as a PEM. Each keypair can be tagged by a list of tags which make is possible for the client to differentiate between various keypairs.
     * @summary Stores a keypair
     * @param {PostKeypairsRequest} [create_keypair_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    keypairsPost(create_keypair_params?: PostKeypairsRequest, options?: any): Promise<KeypairResponse>;
}
/**
 * PassphraseDerivationArtefactApi - fetch parameter creator
 * @export
 */
export declare const PassphraseDerivationArtefactApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returnes passphrase derivation artefacts which were used for generation of the passphrase derived key.The format is as a JSON string encoded as Base64 (urlsafe).
     * @summary Retrieves the passphrase derivation artefact for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactGet(options?: any): FetchArgs;
    /**
     * Passphrase derivation artefacts used for generation of the passphrase derived key are expected to be sent as a JSON string encoded as Base64 (urlsafe) a field of the payload to this endpoint.
     * @summary Stores passphrase derivation artefacts
     * @param {PostPassphraseDerivationArtefactRequest} [create_passphrase_artefact_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactPost(create_passphrase_artefact_params?: PostPassphraseDerivationArtefactRequest | undefined, options?: any): FetchArgs;
};
/**
 * PassphraseDerivationArtefactApi - functional programming interface
 * @export
 */
export declare const PassphraseDerivationArtefactApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returnes passphrase derivation artefacts which were used for generation of the passphrase derived key.The format is as a JSON string encoded as Base64 (urlsafe).
     * @summary Retrieves the passphrase derivation artefact for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<PassphraseDerivationArtefactResponse>;
    /**
     * Passphrase derivation artefacts used for generation of the passphrase derived key are expected to be sent as a JSON string encoded as Base64 (urlsafe) a field of the payload to this endpoint.
     * @summary Stores passphrase derivation artefacts
     * @param {PostPassphraseDerivationArtefactRequest} [create_passphrase_artefact_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactPost(create_passphrase_artefact_params?: PostPassphraseDerivationArtefactRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<PassphraseDerivationArtefactResponse>;
};
/**
 * PassphraseDerivationArtefactApi - factory interface
 * @export
 */
export declare const PassphraseDerivationArtefactApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Returnes passphrase derivation artefacts which were used for generation of the passphrase derived key.The format is as a JSON string encoded as Base64 (urlsafe).
     * @summary Retrieves the passphrase derivation artefact for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactGet(options?: any): Promise<PassphraseDerivationArtefactResponse>;
    /**
     * Passphrase derivation artefacts used for generation of the passphrase derived key are expected to be sent as a JSON string encoded as Base64 (urlsafe) a field of the payload to this endpoint.
     * @summary Stores passphrase derivation artefacts
     * @param {PostPassphraseDerivationArtefactRequest} [create_passphrase_artefact_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passphraseDerivationArtefactPost(create_passphrase_artefact_params?: PostPassphraseDerivationArtefactRequest | undefined, options?: any): Promise<PassphraseDerivationArtefactResponse>;
};
/**
 * PassphraseDerivationArtefactApi - object-oriented interface
 * @export
 * @class PassphraseDerivationArtefactApi
 * @extends {BaseAPI}
 */
export declare class PassphraseDerivationArtefactApi extends BaseAPI {
    /**
     * Returnes passphrase derivation artefacts which were used for generation of the passphrase derived key.The format is as a JSON string encoded as Base64 (urlsafe).
     * @summary Retrieves the passphrase derivation artefact for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseDerivationArtefactApi
     */
    passphraseDerivationArtefactGet(options?: any): Promise<PassphraseDerivationArtefactResponse>;
    /**
     * Passphrase derivation artefacts used for generation of the passphrase derived key are expected to be sent as a JSON string encoded as Base64 (urlsafe) a field of the payload to this endpoint.
     * @summary Stores passphrase derivation artefacts
     * @param {PostPassphraseDerivationArtefactRequest} [create_passphrase_artefact_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassphraseDerivationArtefactApi
     */
    passphraseDerivationArtefactPost(create_passphrase_artefact_params?: PostPassphraseDerivationArtefactRequest, options?: any): Promise<PassphraseDerivationArtefactResponse>;
}
/**
 * SessionApi - fetch parameter creator
 * @export
 */
export declare const SessionApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * @summary Deletes all user sessions
     * @param {string} [delete_all_sessions_params] if present, the current session will not be deleted. If absent, all current session will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionAllDelete(delete_all_sessions_params?: string | undefined, options?: any): FetchArgs;
    /**
     * Log out, deleting current Session.
     * @summary Deletes a session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionDelete(options?: any): FetchArgs;
    /**
     * Log in with username and passphrase, creating a Session
     * @summary Creates a session
     * @param {PostSessionRequest} [create_session_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionPost(create_session_params?: PostSessionRequest | undefined, options?: any): FetchArgs;
    /**
     * A call to log in and obtain a session authentication string in the flowwith an external party. `login_key` is an identification token which will be sent to the external party for user verification.This call must be preceded by the external party calling `/admin/users` and creating a user record.
     * @summary Creates a session with a login key of the external party
     * @param {PostSessionWithLoginKeyRequest} [create_session_with_login_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionWithLoginKeyPost(create_session_with_login_key_params?: PostSessionWithLoginKeyRequest | undefined, options?: any): FetchArgs;
    /**
     * Creates a session using SRP (Secure Remote Password) authentication
     * @summary Creates a session with SRP authentication
     * @param {PostSrpSessionRequest} [user_param]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpSessionPost(user_param?: PostSrpSessionRequest | undefined, options?: any): FetchArgs;
};
/**
 * SessionApi - functional programming interface
 * @export
 */
export declare const SessionApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * @summary Deletes all user sessions
     * @param {string} [delete_all_sessions_params] if present, the current session will not be deleted. If absent, all current session will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionAllDelete(delete_all_sessions_params?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Log out, deleting current Session.
     * @summary Deletes a session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionDelete(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Log in with username and passphrase, creating a Session
     * @summary Creates a session
     * @param {PostSessionRequest} [create_session_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionPost(create_session_params?: PostSessionRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SessionResponse>;
    /**
     * A call to log in and obtain a session authentication string in the flowwith an external party. `login_key` is an identification token which will be sent to the external party for user verification.This call must be preceded by the external party calling `/admin/users` and creating a user record.
     * @summary Creates a session with a login key of the external party
     * @param {PostSessionWithLoginKeyRequest} [create_session_with_login_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionWithLoginKeyPost(create_session_with_login_key_params?: PostSessionWithLoginKeyRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SessionResponse>;
    /**
     * Creates a session using SRP (Secure Remote Password) authentication
     * @summary Creates a session with SRP authentication
     * @param {PostSrpSessionRequest} [user_param]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpSessionPost(user_param?: PostSrpSessionRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SessionResponse>;
};
/**
 * SessionApi - factory interface
 * @export
 */
export declare const SessionApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * @summary Deletes all user sessions
     * @param {string} [delete_all_sessions_params] if present, the current session will not be deleted. If absent, all current session will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionAllDelete(delete_all_sessions_params?: string | undefined, options?: any): Promise<Response>;
    /**
     * Log out, deleting current Session.
     * @summary Deletes a session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionDelete(options?: any): Promise<Response>;
    /**
     * Log in with username and passphrase, creating a Session
     * @summary Creates a session
     * @param {PostSessionRequest} [create_session_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionPost(create_session_params?: PostSessionRequest | undefined, options?: any): Promise<SessionResponse>;
    /**
     * A call to log in and obtain a session authentication string in the flowwith an external party. `login_key` is an identification token which will be sent to the external party for user verification.This call must be preceded by the external party calling `/admin/users` and creating a user record.
     * @summary Creates a session with a login key of the external party
     * @param {PostSessionWithLoginKeyRequest} [create_session_with_login_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionWithLoginKeyPost(create_session_with_login_key_params?: PostSessionWithLoginKeyRequest | undefined, options?: any): Promise<SessionResponse>;
    /**
     * Creates a session using SRP (Secure Remote Password) authentication
     * @summary Creates a session with SRP authentication
     * @param {PostSrpSessionRequest} [user_param]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpSessionPost(user_param?: PostSrpSessionRequest | undefined, options?: any): Promise<SessionResponse>;
};
/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export declare class SessionApi extends BaseAPI {
    /**
     * Deletes either (1) all user sessions (that is, access tokens), (2) or all user sessions except for the session under which the current call is being executed.
     * @summary Deletes all user sessions
     * @param {string} [delete_all_sessions_params] if present, the current session will not be deleted. If absent, all current session will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    sessionAllDelete(delete_all_sessions_params?: string, options?: any): Promise<Response>;
    /**
     * Log out, deleting current Session.
     * @summary Deletes a session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    sessionDelete(options?: any): Promise<Response>;
    /**
     * Log in with username and passphrase, creating a Session
     * @summary Creates a session
     * @param {PostSessionRequest} [create_session_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    sessionPost(create_session_params?: PostSessionRequest, options?: any): Promise<SessionResponse>;
    /**
     * A call to log in and obtain a session authentication string in the flowwith an external party. `login_key` is an identification token which will be sent to the external party for user verification.This call must be preceded by the external party calling `/admin/users` and creating a user record.
     * @summary Creates a session with a login key of the external party
     * @param {PostSessionWithLoginKeyRequest} [create_session_with_login_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    sessionWithLoginKeyPost(create_session_with_login_key_params?: PostSessionWithLoginKeyRequest, options?: any): Promise<SessionResponse>;
    /**
     * Creates a session using SRP (Secure Remote Password) authentication
     * @summary Creates a session with SRP authentication
     * @param {PostSrpSessionRequest} [user_param]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    srpSessionPost(user_param?: PostSrpSessionRequest, options?: any): Promise<SessionResponse>;
}
/**
 * SharedKeyApi - fetch parameter creator
 * @export
 */
export declare const SharedKeyApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Claims a shared key
     * @param {string} external_id
     * @param {PostSharedKeysClaimKeyRequest} [claim_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysExternalIdClaimKeyPost(external_id: string, claim_key_params?: PostSharedKeysClaimKeyRequest | undefined, options?: any): FetchArgs;
    /**
     *
     * @summary Creates a shared key
     * @param {PostSharedKeysRequest} [create_shared_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysPost(create_shared_key_params?: PostSharedKeysRequest | undefined, options?: any): FetchArgs;
};
/**
 * SharedKeyApi - functional programming interface
 * @export
 */
export declare const SharedKeyApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Claims a shared key
     * @param {string} external_id
     * @param {PostSharedKeysClaimKeyRequest} [claim_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysExternalIdClaimKeyPost(external_id: string, claim_key_params?: PostSharedKeysClaimKeyRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SharedKeyClaimedResponse>;
    /**
     *
     * @summary Creates a shared key
     * @param {PostSharedKeysRequest} [create_shared_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysPost(create_shared_key_params?: PostSharedKeysRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SharedKeyResponse>;
};
/**
 * SharedKeyApi - factory interface
 * @export
 */
export declare const SharedKeyApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary Claims a shared key
     * @param {string} external_id
     * @param {PostSharedKeysClaimKeyRequest} [claim_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysExternalIdClaimKeyPost(external_id: string, claim_key_params?: PostSharedKeysClaimKeyRequest | undefined, options?: any): Promise<SharedKeyClaimedResponse>;
    /**
     *
     * @summary Creates a shared key
     * @param {PostSharedKeysRequest} [create_shared_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sharedKeysPost(create_shared_key_params?: PostSharedKeysRequest | undefined, options?: any): Promise<SharedKeyResponse>;
};
/**
 * SharedKeyApi - object-oriented interface
 * @export
 * @class SharedKeyApi
 * @extends {BaseAPI}
 */
export declare class SharedKeyApi extends BaseAPI {
    /**
     *
     * @summary Claims a shared key
     * @param {string} external_id
     * @param {PostSharedKeysClaimKeyRequest} [claim_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedKeyApi
     */
    sharedKeysExternalIdClaimKeyPost(external_id: string, claim_key_params?: PostSharedKeysClaimKeyRequest, options?: any): Promise<SharedKeyClaimedResponse>;
    /**
     *
     * @summary Creates a shared key
     * @param {PostSharedKeysRequest} [create_shared_key_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedKeyApi
     */
    sharedKeysPost(create_shared_key_params?: PostSharedKeysRequest, options?: any): Promise<SharedKeyResponse>;
}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export declare const UserApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostAdminUsersRequest} [admin_create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersPost(admin_create_user_params?: PostAdminUsersRequest | undefined, options?: any): FetchArgs;
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostResellerUserCreateRequest} [reseller_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    portalServiceV1ResellerUserCreatePost(reseller_user_params?: PostResellerUserCreateRequest | undefined, options?: any): FetchArgs;
    /**
     * Creates an SRP challenge to authenticate with for a given username (Secure Remote Password)
     * @summary Creates a challenge for SRP user auth
     * @param {PostSrpChallengesRequest} [challenge]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpChallengesPost(challenge?: PostSrpChallengesRequest | undefined, options?: any): FetchArgs;
    /**
     * Creates a username for use on the POST /srp/users endpoint
     * @summary Creates a username for use with SRP auth
     * @param {PostSrpUsernameRequest} [create_username_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsernamePost(create_username_params?: PostSrpUsernameRequest | undefined, options?: any): FetchArgs;
    /**
     * Creates a user acception only SRP (Secure Remote Password) authentication
     * @summary Creates a user using SRP auth
     * @param {PostSrpUsersRequest} [create_user_with_srp_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsersPost(create_user_with_srp_params?: PostSrpUsersRequest | undefined, options?: any): FetchArgs;
    /**
     * Removes the current user from the queue for asynchronous deletion.
     * @summary removes a user from queue for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueueDelete(options?: any): FetchArgs;
    /**
     * Queues the current user for asynchronous deletion.
     * @summary Queues a user for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueuePost(options?: any): FetchArgs;
    /**
     *
     * @summary Creates a user
     * @param {PostUsersRequest} [create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(create_user_params?: PostUsersRequest | undefined, options?: any): FetchArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration | undefined) => {
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostAdminUsersRequest} [admin_create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersPost(admin_create_user_params?: PostAdminUsersRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostResellerUserCreateRequest} [reseller_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    portalServiceV1ResellerUserCreatePost(reseller_user_params?: PostResellerUserCreateRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * Creates an SRP challenge to authenticate with for a given username (Secure Remote Password)
     * @summary Creates a challenge for SRP user auth
     * @param {PostSrpChallengesRequest} [challenge]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpChallengesPost(challenge?: PostSrpChallengesRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SrpChallengesResponse>;
    /**
     * Creates a username for use on the POST /srp/users endpoint
     * @summary Creates a username for use with SRP auth
     * @param {PostSrpUsernameRequest} [create_username_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsernamePost(create_username_params?: PostSrpUsernameRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UsernameResponse>;
    /**
     * Creates a user acception only SRP (Secure Remote Password) authentication
     * @summary Creates a user using SRP auth
     * @param {PostSrpUsersRequest} [create_user_with_srp_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsersPost(create_user_with_srp_params?: PostSrpUsersRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * Removes the current user from the queue for asynchronous deletion.
     * @summary removes a user from queue for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueueDelete(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Queues the current user for asynchronous deletion.
     * @summary Queues a user for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueuePost(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeletionQueueItemResponse>;
    /**
     *
     * @summary Creates a user
     * @param {PostUsersRequest} [create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(create_user_params?: PostUsersRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostAdminUsersRequest} [admin_create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUsersPost(admin_create_user_params?: PostAdminUsersRequest | undefined, options?: any): Promise<UserResponse>;
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostResellerUserCreateRequest} [reseller_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    portalServiceV1ResellerUserCreatePost(reseller_user_params?: PostResellerUserCreateRequest | undefined, options?: any): Promise<UserResponse>;
    /**
     * Creates an SRP challenge to authenticate with for a given username (Secure Remote Password)
     * @summary Creates a challenge for SRP user auth
     * @param {PostSrpChallengesRequest} [challenge]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpChallengesPost(challenge?: PostSrpChallengesRequest | undefined, options?: any): Promise<SrpChallengesResponse>;
    /**
     * Creates a username for use on the POST /srp/users endpoint
     * @summary Creates a username for use with SRP auth
     * @param {PostSrpUsernameRequest} [create_username_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsernamePost(create_username_params?: PostSrpUsernameRequest | undefined, options?: any): Promise<UsernameResponse>;
    /**
     * Creates a user acception only SRP (Secure Remote Password) authentication
     * @summary Creates a user using SRP auth
     * @param {PostSrpUsersRequest} [create_user_with_srp_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    srpUsersPost(create_user_with_srp_params?: PostSrpUsersRequest | undefined, options?: any): Promise<UserResponse>;
    /**
     * Removes the current user from the queue for asynchronous deletion.
     * @summary removes a user from queue for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueueDelete(options?: any): Promise<Response>;
    /**
     * Queues the current user for asynchronous deletion.
     * @summary Queues a user for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersDeletionQueuePost(options?: any): Promise<DeletionQueueItemResponse>;
    /**
     *
     * @summary Creates a user
     * @param {PostUsersRequest} [create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(create_user_params?: PostUsersRequest | undefined, options?: any): Promise<UserResponse>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostAdminUsersRequest} [admin_create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    adminUsersPost(admin_create_user_params?: PostAdminUsersRequest, options?: any): Promise<UserResponse>;
    /**
     * A Vault user account is created by the external party, this is a backend-to-backend call. In order to perform this call the external party must possess a `provider_api_key`.
     * @summary Creates a user account
     * @param {PostResellerUserCreateRequest} [reseller_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    portalServiceV1ResellerUserCreatePost(reseller_user_params?: PostResellerUserCreateRequest, options?: any): Promise<UserResponse>;
    /**
     * Creates an SRP challenge to authenticate with for a given username (Secure Remote Password)
     * @summary Creates a challenge for SRP user auth
     * @param {PostSrpChallengesRequest} [challenge]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    srpChallengesPost(challenge?: PostSrpChallengesRequest, options?: any): Promise<SrpChallengesResponse>;
    /**
     * Creates a username for use on the POST /srp/users endpoint
     * @summary Creates a username for use with SRP auth
     * @param {PostSrpUsernameRequest} [create_username_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    srpUsernamePost(create_username_params?: PostSrpUsernameRequest, options?: any): Promise<UsernameResponse>;
    /**
     * Creates a user acception only SRP (Secure Remote Password) authentication
     * @summary Creates a user using SRP auth
     * @param {PostSrpUsersRequest} [create_user_with_srp_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    srpUsersPost(create_user_with_srp_params?: PostSrpUsersRequest, options?: any): Promise<UserResponse>;
    /**
     * Removes the current user from the queue for asynchronous deletion.
     * @summary removes a user from queue for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersDeletionQueueDelete(options?: any): Promise<Response>;
    /**
     * Queues the current user for asynchronous deletion.
     * @summary Queues a user for deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersDeletionQueuePost(options?: any): Promise<DeletionQueueItemResponse>;
    /**
     *
     * @summary Creates a user
     * @param {PostUsersRequest} [create_user_params]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersPost(create_user_params?: PostUsersRequest, options?: any): Promise<UserResponse>;
}
/**
 * VersionApi - fetch parameter creator
 * @export
 */
export declare const VersionApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns the API version and the component name
     * @summary Returns the API version and the component name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): FetchArgs;
};
/**
 * VersionApi - functional programming interface
 * @export
 */
export declare const VersionApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns the API version and the component name
     * @summary Returns the API version and the component name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<VersionResponse>;
};
/**
 * VersionApi - factory interface
 * @export
 */
export declare const VersionApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Returns the API version and the component name
     * @summary Returns the API version and the component name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): Promise<VersionResponse>;
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export declare class VersionApi extends BaseAPI {
    /**
     * Returns the API version and the component name
     * @summary Returns the API version and the component name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    versionGet(options?: any): Promise<VersionResponse>;
}
/**
 * WellKnownApi - fetch parameter creator
 * @export
 */
export declare const WellKnownApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownRecaptchaGet(options?: any): FetchArgs;
};
/**
 * WellKnownApi - functional programming interface
 * @export
 */
export declare const WellKnownApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownRecaptchaGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<WellKnownRecaptchaResponse>;
};
/**
 * WellKnownApi - factory interface
 * @export
 */
export declare const WellKnownApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownRecaptchaGet(options?: any): Promise<WellKnownRecaptchaResponse>;
};
/**
 * WellKnownApi - object-oriented interface
 * @export
 * @class WellKnownApi
 * @extends {BaseAPI}
 */
export declare class WellKnownApi extends BaseAPI {
    /**
     * Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @summary Gets recaptcha settings (mainly site key to be used for recaptcha verifications)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WellKnownApi
     */
    wellKnownRecaptchaGet(options?: any): Promise<WellKnownRecaptchaResponse>;
}
