import { Connection, PostSharesEncryptedValues } from '@meeco/vault-api-sdk';
import { AuthData } from '../models/auth-data';
import { EncryptionKey } from '../models/encryption-key';
import { Environment } from '../models/environment';
interface ISharedEncryptionSpace {
    from_user_connection_id: string;
    to_user_connection_id?: string;
    shared_data_encryption_key?: EncryptionKey;
}
interface IShareOptions {
    expires_at?: Date;
    terms?: string;
    note?: string;
    distributable?: boolean;
    tradeable?: boolean;
}
/**
 * Service for sharing data between two connected Meeco users.
 * Connections can be setup via the {@link ConnectionService}
 */
export declare class ShareService {
    private environment;
    private log;
    /**
     * @visibleForTesting
     * @ignore
     */
    static Date: DateConstructor;
    private cryppo;
    private keystoreApiFactory;
    private vaultApiFactory;
    constructor(environment: Environment, log?: (message: string) => void);
    shareItem(fromUser: AuthData, connectionId: string, itemId: string, shareOptions?: IShareOptions): Promise<{
        share: import("@meeco/vault-api-sdk").SharesResponse;
        shareable_id: string;
        shareable_type: string;
        encrypted_values: PostSharesEncryptedValues[];
        distributable: boolean;
        outgoing: boolean;
        user_id: string;
        expires_at?: Date | undefined;
        terms?: string | undefined;
        note?: string | undefined;
        tradeable?: boolean | undefined;
    }>;
    listShares(user: AuthData): Promise<import("@meeco/vault-api-sdk").FastSharesOutgoingResponse>;
    deleteSharedItem(user: AuthData, shareId: string): Promise<void>;
    getSharedItem(user: AuthData, shareId: string): Promise<{
        item: import("@meeco/vault-api-sdk").Item;
        slots: Pick<import("@meeco/vault-api-sdk").NestedSlotAttributes, "id" | "name" | "description" | "ordinal" | "visible" | "image_id" | "template_slot_id" | "slot_type_id" | "slot_type_name" | "value" | "label" | "_destroy" | "attachments_attributes" | "classification_nodes_attributes">[];
        share: import("@meeco/vault-api-sdk").Share;
        connection: Connection;
    }>;
    private shareItemFromVaultItem;
    fetchSharedEncryptionSpace(user: AuthData, connection: Connection): Promise<ISharedEncryptionSpace>;
    private createSharedEncryptionSpace;
    private ensureClaimedKey;
    private claimSharedEncryptionSpace;
    private createAndStoreNewDataEncryptionKey;
    private claimAndReEncryptSharedDataEncryptionKey;
    private buildClaimKeySignature;
    /**
     * In the API: a share expects an `encrypted_value` property.
     * For a tile item - this is a stringified json payload of key/value
     * pairs where the key is the slot id and the value is the slot value
     * encrypted with a shared data encryption key.
     */
    private convertSlotsToEncryptedValuesForShare;
}
export {};
