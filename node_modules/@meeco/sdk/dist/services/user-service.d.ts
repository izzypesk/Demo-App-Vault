import { AuthData } from '../models/auth-data';
import { Environment } from '../models/environment';
/**
 * Create and update Meeco Users.
 */
export declare class UserService {
    private log;
    static VAULT_PAIR_EXTERNAL_IDENTIFIER: string;
    readonly vaultKeypairExternalId: any;
    private cryppo;
    private keystoreApiFactory;
    private vaultApiFactory;
    private keyGen;
    constructor(environment: Environment, log?: (msg: string) => void);
    private requestKeyPair;
    private requestExternalAdmissionTokens;
    private generateAndStoreKeyEncryptionKey;
    private getKeyEncryptionKey;
    private generateAndStoreDataEncryptionKey;
    private getDataEncryptionKey;
    private generateAndStoreVaultKeyPair;
    private createNewVaultUser;
    private getVaultSession;
    private createPrivateEncryptionSpaceForUser;
    /**
     * Request a new random username from the Keystore API to use for user creation
     */
    generateUsername(captcha_token?: string): Promise<string>;
    /**
     * Usernames for secrets can be generated via {@link generateUsername}
     */
    create(userPassword: string, secret: string): Promise<AuthData>;
    private registerKeystoreViaSRP;
    private loginKeystoreViaSRP;
    /**
     * Given a user's passphrase and secret - fetch all data required to interact with Meeco's APIs on their behalf such as encryption keys
     */
    get(userPassword: string, secret: string): Promise<AuthData>;
    getVaultUser(vaultAccessToken: string): Promise<import("@meeco/vault-api-sdk").MeResponse>;
}
