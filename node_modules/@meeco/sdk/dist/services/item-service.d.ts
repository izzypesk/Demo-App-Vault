import { Slot } from '@meeco/vault-api-sdk';
import { AuthData } from '../models/auth-data';
import { EncryptionKey } from '../models/encryption-key';
import { Environment } from '../models/environment';
import { FileAttachmentData } from '../models/file-attachment-data';
import { ItemCreateData } from '../models/item-create-data';
import { ItemUpdateData } from '../models/item-update-data';
import { DecryptedSlot } from '../models/local-slot';
/**
 * Used for fetching and sending `Items` to and from the Vault.
 */
export declare class ItemService {
    private log;
    private static cryppo;
    private vaultAPIFactory;
    constructor(environment: Environment, log?: (message: string) => void);
    /**
     * Updates 'value' to the decrypted 'encrypted_value' and sets 'encrypted' to false.
     */
    static decryptAllSlots(slots: Slot[], dataEncryptionKey: EncryptionKey): Promise<DecryptedSlot[]>;
    create(vaultAccessToken: string, dek: EncryptionKey, config: ItemCreateData): Promise<import("@meeco/vault-api-sdk").ItemResponse>;
    update(vaultAccessToken: string, dek: EncryptionKey, config: ItemUpdateData): Promise<import("@meeco/vault-api-sdk").ItemResponse>;
    private generateAndUploadThumbnail;
    attachFile(config: FileAttachmentData, auth: AuthData): Promise<import("@meeco/vault-api-sdk").ItemResponse>;
    private downloadAndDecryptFile;
    downloadAttachment(id: string, vaultAccessToken: string, dataEncryptionKey: EncryptionKey): Promise<any>;
    downloadThumbnail(id: string, vaultAccessToken: string, dataEncryptionKey: EncryptionKey): Promise<any>;
    removeSlot(slotId: string, vaultAccessToken: string): Promise<void>;
    get(id: string, vaultAccessToken: string, dataEncryptionKey: EncryptionKey): Promise<{
        slots: Pick<import("@meeco/vault-api-sdk").NestedSlotAttributes, "id" | "name" | "description" | "ordinal" | "visible" | "image_id" | "template_slot_id" | "slot_type_id" | "slot_type_name" | "value" | "label" | "_destroy" | "attachments_attributes" | "classification_nodes_attributes">[];
        associations_to: import("@meeco/vault-api-sdk").Association[];
        associations: import("@meeco/vault-api-sdk").Association[];
        attachments: import("@meeco/vault-api-sdk").Attachment[];
        classification_nodes: import("@meeco/vault-api-sdk").ClassificationNode[];
        item: import("@meeco/vault-api-sdk").Item;
        shares: import("@meeco/vault-api-sdk").Share[];
        thumbnails: import("@meeco/vault-api-sdk").Thumbnail[];
    }>;
    private encryptSlot;
    list(vaultAccessToken: string): Promise<import("@meeco/vault-api-sdk").ItemsResponse>;
}
