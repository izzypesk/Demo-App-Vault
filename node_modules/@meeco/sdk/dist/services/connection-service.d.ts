import { Connection } from '@meeco/vault-api-sdk';
import { AuthData } from '../models/auth-data';
import { ConnectionCreateData } from '../models/connection-create-data';
import { Environment } from '../models/environment';
/**
 * Used for setting up connections between Meeco `User`s to allow the secure sharing of data (see also {@link ShareService})
 */
export declare class ConnectionService {
    private environment;
    private log;
    private cryppo;
    private vaultApiFactory;
    private keystoreApiFactory;
    constructor(environment: Environment, log?: (message: string) => void);
    createInvitation(name: string, auth: AuthData): Promise<import("@meeco/vault-api-sdk").Invitation>;
    acceptInvitation(name: string, invitationToken: string, auth: AuthData): Promise<Connection>;
    /**
     * Note this only works if we have authentication data for both connecting users.
     * For more typical use cases you should manually call {@link createInvitation}
     * as one user and {@link acceptInvitation} as the other user.
     */
    createConnection(config: ConnectionCreateData): Promise<{
        invitation: import("@meeco/vault-api-sdk").Invitation;
        fromUserConnection: Connection;
        toUserConnection: Connection;
        options: import("../models/connection-create-data").IConnectionMetadata;
    }>;
    listConnections(user: AuthData): Promise<any[]>;
    private encryptRecipientName;
    private createAndStoreKeyPair;
}
